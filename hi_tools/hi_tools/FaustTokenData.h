struct FaustLibraryToken 
{
    juce::String name;
    juce::String codeToInsert;
    juce::String url;
};

juce::Array<FaustLibraryToken> createFaustLibraryTokens()
{
    juce::Array<FaustLibraryToken> tokens;
    tokens.add({"aa.clip", "", "https://faustlibraries.grame.fr/libs/aanl/#aaclip"});
    tokens.add({"aa.Rsqrt", "", "https://faustlibraries.grame.fr/libs/aanl/#aarsqrt"});
    tokens.add({"aa.Rlog", "", "https://faustlibraries.grame.fr/libs/aanl/#aarlog"});
    tokens.add({"aa.Rtan", "", "https://faustlibraries.grame.fr/libs/aanl/#aartan"});
    tokens.add({"aa.Racos", "", "https://faustlibraries.grame.fr/libs/aanl/#aaracos"});
    tokens.add({"aa.Rasin", "", "https://faustlibraries.grame.fr/libs/aanl/#aarasin"});
    tokens.add({"aa.Racosh", "", "https://faustlibraries.grame.fr/libs/aanl/#aaracosh"});
    tokens.add({"aa.Rcosh", "", "https://faustlibraries.grame.fr/libs/aanl/#aarcosh"});
    tokens.add({"aa.Rsinh", "", "https://faustlibraries.grame.fr/libs/aanl/#aarsinh"});
    tokens.add({"aa.Ratanh", "", "https://faustlibraries.grame.fr/libs/aanl/#aaratanh"});
    tokens.add({"aa.ADAA1", "", "https://faustlibraries.grame.fr/libs/aanl/#aaadaa1"});
    tokens.add({"aa.ADAA2", "", "https://faustlibraries.grame.fr/libs/aanl/#aaadaa2"});
    tokens.add({"aa.hardclip", "aa.aa.hardclip", "https://faustlibraries.grame.fr/libs/aanl/#aahardclip"});
    tokens.add({"aa.hardclip2", "aa.aa.hardclip2", "https://faustlibraries.grame.fr/libs/aanl/#aahardclip2"});
    tokens.add({"aa.cubic1", "aa.aa.cubic1", "https://faustlibraries.grame.fr/libs/aanl/#aacubic1"});
    tokens.add({"aa.parabolic", "aa.aa.parabolic", "https://faustlibraries.grame.fr/libs/aanl/#aaparabolic"});
    tokens.add({"aa.parabolic2", "_ : aa.parabolic : _", "https://faustlibraries.grame.fr/libs/aanl/#aaparabolic2"});
    tokens.add({"aa.hyperbolic", "aa.aa.hyperbolic", "https://faustlibraries.grame.fr/libs/aanl/#aahyperbolic"});
    tokens.add({"aa.hyperbolic2", "aa.aa.hyperbolic2", "https://faustlibraries.grame.fr/libs/aanl/#aahyperbolic2"});
    tokens.add({"aa.sinarctan", "_ : aa.sinatan : _", "https://faustlibraries.grame.fr/libs/aanl/#aasinarctan"});
    tokens.add({"aa.sinarctan2", "aa.aa.sinarctan2", "https://faustlibraries.grame.fr/libs/aanl/#aasinarctan2"});
    tokens.add({"aa.tanh1", "aa.aa.tanh1", "https://faustlibraries.grame.fr/libs/aanl/#aatanh1"});
    tokens.add({"aa.arctan", "aa.aa.arctan", "https://faustlibraries.grame.fr/libs/aanl/#aaarctan"});
    tokens.add({"aa.arctan2", "aa.aa.arctan2", "https://faustlibraries.grame.fr/libs/aanl/#aaarctan2"});
    tokens.add({"aa.asinh1", "aa.aa.asinh1", "https://faustlibraries.grame.fr/libs/aanl/#aaasinh1"});
    tokens.add({"aa.asinh2", "aa.aa.asinh2", "https://faustlibraries.grame.fr/libs/aanl/#aaasinh2"});
    tokens.add({"aa.cosine1", "aa.aa.cosine1", "https://faustlibraries.grame.fr/libs/aanl/#aacosine1"});
    tokens.add({"aa.cosine2", "aa.aa.cosine2", "https://faustlibraries.grame.fr/libs/aanl/#aacosine2"});
    tokens.add({"aa.arccos", "aa.aa.arccos", "https://faustlibraries.grame.fr/libs/aanl/#aaarccos"});
    tokens.add({"aa.arccos2", "aa.aa.arccos2", "https://faustlibraries.grame.fr/libs/aanl/#aaarccos2"});
    tokens.add({"aa.acosh1", "aa.aa.acosh1", "https://faustlibraries.grame.fr/libs/aanl/#aaacosh1"});
    tokens.add({"aa.acosh2", "aa.aa.acosh2", "https://faustlibraries.grame.fr/libs/aanl/#aaacosh2"});
    tokens.add({"aa.sine", "aa.aa.sine", "https://faustlibraries.grame.fr/libs/aanl/#aasine"});
    tokens.add({"aa.sine2", "aa.aa.sine2", "https://faustlibraries.grame.fr/libs/aanl/#aasine2"});
    tokens.add({"aa.arcsin", "aa.aa.arcsin", "https://faustlibraries.grame.fr/libs/aanl/#aaarcsin"});
    tokens.add({"aa.arcsin2", "aa.aa.arcsin2", "https://faustlibraries.grame.fr/libs/aanl/#aaarcsin2"});
    tokens.add({"aa.tangent", "aa.aa.tangent", "https://faustlibraries.grame.fr/libs/aanl/#aatangent"});
    tokens.add({"aa.atanh1", "aa.aa.atanh1", "https://faustlibraries.grame.fr/libs/aanl/#aaatanh1"});
    tokens.add({"aa.atanh2", "aa.aa.atanh2", "https://faustlibraries.grame.fr/libs/aanl/#aaatanh2"});
    tokens.add({"an.abs_envelope_rect", "an.abs_envelope_rect(period)", "https://faustlibraries.grame.fr/libs/analyzers/#anabs_envelope_rect"});
    tokens.add({"an.abs_envelope_tau", "an.abs_envelope_tau(period)", "https://faustlibraries.grame.fr/libs/analyzers/#anabs_envelope_tau"});
    tokens.add({"an.abs_envelope_t60", "an.abs_envelope_t60(period)", "https://faustlibraries.grame.fr/libs/analyzers/#anabs_envelope_t60"});
    tokens.add({"an.abs_envelope_t19", "an.abs_envelope_t19(period)", "https://faustlibraries.grame.fr/libs/analyzers/#anabs_envelope_t19"});
    tokens.add({"an.amp_follower", "an.amp_follower(rel)", "https://faustlibraries.grame.fr/libs/analyzers/#anamp_follower"});
    tokens.add({"an.amp_follower_ud", "an.amp_follower_ud(att,rel)", "https://faustlibraries.grame.fr/libs/analyzers/#anamp_follower_ud"});
    tokens.add({"an.amp_follower_ar", "an.amp_follower_ar(att,rel)", "https://faustlibraries.grame.fr/libs/analyzers/#anamp_follower_ar"});
    tokens.add({"an.ms_envelope_rect", "an.ms_envelope_rect(period)", "https://faustlibraries.grame.fr/libs/analyzers/#anms_envelope_rect"});
    tokens.add({"an.ms_envelope_tau", "an.ms_envelope_tau(period)", "https://faustlibraries.grame.fr/libs/analyzers/#anms_envelope_tau"});
    tokens.add({"an.ms_envelope_t60", "an.ms_envelope_t60(period)", "https://faustlibraries.grame.fr/libs/analyzers/#anms_envelope_t60"});
    tokens.add({"an.ms_envelope_t19", "an.ms_envelope_t19(period)", "https://faustlibraries.grame.fr/libs/analyzers/#anms_envelope_t19"});
    tokens.add({"an.rms_envelope_rect", "an.rms_envelope_rect(period)", "https://faustlibraries.grame.fr/libs/analyzers/#anrms_envelope_rect"});
    tokens.add({"an.rms_envelope_tau", "an.rms_envelope_tau(period)", "https://faustlibraries.grame.fr/libs/analyzers/#anrms_envelope_tau"});
    tokens.add({"an.rms_envelope_t60", "an.rms_envelope_t60(period)", "https://faustlibraries.grame.fr/libs/analyzers/#anrms_envelope_t60"});
    tokens.add({"an.rms_envelope_t19", "an.rms_envelope_t19(period)", "https://faustlibraries.grame.fr/libs/analyzers/#anrms_envelope_t19"});
    tokens.add({"an.mth_octave_analyzer", "an.mth_octave_analyzer(O,M,ftop,N)", "https://faustlibraries.grame.fr/libs/analyzers/#anmth_octave_analyzer"});
    tokens.add({"an.mth_octave_spectral_level6e", "an.mth_octave_spectral_level6e(M,ftop,NBands,tau,dB_offset)", "https://faustlibraries.grame.fr/libs/analyzers/#anmth_octave_spectral_level6e"});
    tokens.add({"an.[third|half]_octave_[analyzer|filterbank]", "", "https://faustlibraries.grame.fr/libs/analyzers/#an[third|half]_octave_[analyzer|filterbank]"});
    tokens.add({"an.analyzer", "an.analyzer(O,freqs)", "https://faustlibraries.grame.fr/libs/analyzers/#ananalyzer"});
    tokens.add({"an.ifft", "an.ifft(N)", "https://faustlibraries.grame.fr/libs/analyzers/#anifft"});
    tokens.add({"ba.samp2sec", "ba.samp2sec(n)", "https://faustlibraries.grame.fr/libs/basics/#basamp2sec"});
    tokens.add({"ba.sec2samp", "ba.sec2samp(d)", "https://faustlibraries.grame.fr/libs/basics/#basec2samp"});
    tokens.add({"ba.db2linear", "ba.db2linear(l)", "https://faustlibraries.grame.fr/libs/basics/#badb2linear"});
    tokens.add({"ba.linear2db", "ba.linear2db(g)", "https://faustlibraries.grame.fr/libs/basics/#balinear2db"});
    tokens.add({"ba.lin2LogGain", "ba.lin2LogGain(n)", "https://faustlibraries.grame.fr/libs/basics/#balin2loggain"});
    tokens.add({"ba.log2LinGain", "ba.log2LinGain(n)", "https://faustlibraries.grame.fr/libs/basics/#balog2lingain"});
    tokens.add({"ba.tau2pole", "smooth(ba.tau2pole(tau))", "https://faustlibraries.grame.fr/libs/basics/#batau2pole"});
    tokens.add({"ba.pole2tau", "ba.pole2tau(pole)", "https://faustlibraries.grame.fr/libs/basics/#bapole2tau"});
    tokens.add({"ba.midikey2hz", "ba.midikey2hz(mk)", "https://faustlibraries.grame.fr/libs/basics/#bamidikey2hz"});
    tokens.add({"ba.hz2midikey", "ba.hz2midikey(freq)", "https://faustlibraries.grame.fr/libs/basics/#bahz2midikey"});
    tokens.add({"ba.semi2ratio", "ba.semi2ratio(semi)", "https://faustlibraries.grame.fr/libs/basics/#basemi2ratio"});
    tokens.add({"ba.ratio2semi", "ba.ratio2semi(ratio)", "https://faustlibraries.grame.fr/libs/basics/#baratio2semi"});
    tokens.add({"ba.pianokey2hz", "ba.pianokey2hz(pk)", "https://faustlibraries.grame.fr/libs/basics/#bapianokey2hz"});
    tokens.add({"ba.hz2pianokey", "ba.hz2pianokey(f)", "https://faustlibraries.grame.fr/libs/basics/#bahz2pianokey"});
    tokens.add({"ba.countdown", "ba.countdown(n,trig)", "https://faustlibraries.grame.fr/libs/basics/#bacountdown"});
    tokens.add({"ba.countup", "ba.countup(n,trig)", "https://faustlibraries.grame.fr/libs/basics/#bacountup"});
    tokens.add({"ba.sweep", "ba.sweep(period,run)", "https://faustlibraries.grame.fr/libs/basics/#basweep"});
    tokens.add({"ba.time", "ba.time", "https://faustlibraries.grame.fr/libs/basics/#batime"});
    tokens.add({"ba.ramp", "ba.ramp(n)", "https://faustlibraries.grame.fr/libs/basics/#baramp"});
    tokens.add({"ba.line", "ba.line(n)", "https://faustlibraries.grame.fr/libs/basics/#baline"});
    tokens.add({"ba.tempo", "ba.tempo(t)", "https://faustlibraries.grame.fr/libs/basics/#batempo"});
    tokens.add({"ba.period", "ba.period(p)", "https://faustlibraries.grame.fr/libs/basics/#baperiod"});
    tokens.add({"ba.pulse", "ba.pulse(p)", "https://faustlibraries.grame.fr/libs/basics/#bapulse"});
    tokens.add({"ba.pulsen", "ba.pulsen(n,p)", "https://faustlibraries.grame.fr/libs/basics/#bapulsen"});
    tokens.add({"ba.cycle", "ba.cycle(n)", "https://faustlibraries.grame.fr/libs/basics/#bacycle"});
    tokens.add({"ba.beat", "ba.beat(t)", "https://faustlibraries.grame.fr/libs/basics/#babeat"});
    tokens.add({"ba.pulse_countup", "ba.pulse_countup(trig)", "https://faustlibraries.grame.fr/libs/basics/#bapulse_countup"});
    tokens.add({"ba.pulse_countdown", "ba.pulse_countdown(trig)", "https://faustlibraries.grame.fr/libs/basics/#bapulse_countdown"});
    tokens.add({"ba.pulse_countup_loop", "ba.pulse_countup_loop(n,trig)", "https://faustlibraries.grame.fr/libs/basics/#bapulse_countup_loop"});
    tokens.add({"ba.resetCtr", "ba.resetCtr(n,m)", "https://faustlibraries.grame.fr/libs/basics/#baresetctr"});
    tokens.add({"ba.pulse_countdown_loop", "ba.pulse_countdown_loop(n,trig)", "https://faustlibraries.grame.fr/libs/basics/#bapulse_countdown_loop"});
    tokens.add({"ba.count", "count(l)", "https://faustlibraries.grame.fr/libs/basics/#bacount"});
    tokens.add({"ba.take", "take(P,l)", "https://faustlibraries.grame.fr/libs/basics/#batake"});
    tokens.add({"ba.subseq", "subseq(l, P, N)", "https://faustlibraries.grame.fr/libs/basics/#basubseq"});
    tokens.add({"ba.tabulate", "ba.tabulate(C, fun, size, r0, r1, x).(val|lin|cub)", "https://faustlibraries.grame.fr/libs/basics/#batabulate"});
    tokens.add({"ba.if", "", "https://faustlibraries.grame.fr/libs/basics/#baif"});
    tokens.add({"ba.selector", "selector(I,N)", "https://faustlibraries.grame.fr/libs/basics/#baselector"});
    tokens.add({"ba.select2stereo", "ba.select2stereo(bpc)", "https://faustlibraries.grame.fr/libs/basics/#baselect2stereo"});
    tokens.add({"ba.selectn", "selectn(N,i)", "https://faustlibraries.grame.fr/libs/basics/#baselectn"});
    tokens.add({"ba.selectmulti", "selectmulti(n,lgen,id)", "https://faustlibraries.grame.fr/libs/basics/#baselectmulti"});
    tokens.add({"ba.selectoutn", "ba.selectoutn(N, i)", "https://faustlibraries.grame.fr/libs/basics/#baselectoutn"});
    tokens.add({"ba.latch", "ba.latch(clocksig)", "https://faustlibraries.grame.fr/libs/basics/#balatch"});
    tokens.add({"ba.sAndH", "ba.sAndH(t)", "https://faustlibraries.grame.fr/libs/basics/#basandh"});
    tokens.add({"ba.downSample", "ba.downSample(freq)", "https://faustlibraries.grame.fr/libs/basics/#badownsample"});
    tokens.add({"ba.peakhold", "ba.peakhold(mode)", "https://faustlibraries.grame.fr/libs/basics/#bapeakhold"});
    tokens.add({"ba.peakholder", "ba.peakholder(n)", "https://faustlibraries.grame.fr/libs/basics/#bapeakholder"});
    tokens.add({"ba.impulsify", "ba.impulsify;", "https://faustlibraries.grame.fr/libs/basics/#baimpulsify"});
    tokens.add({"ba.automat", "ba.automat(bps, size, init)", "https://faustlibraries.grame.fr/libs/basics/#baautomat"});
    tokens.add({"ba.bpf", "", "https://faustlibraries.grame.fr/libs/basics/#babpf"});
    tokens.add({"ba.listInterp", "index = 1.69; // range is 0-4", "https://faustlibraries.grame.fr/libs/basics/#balistinterp"});
    tokens.add({"ba.bypass1", "ba.bypass1(bpc,e)", "https://faustlibraries.grame.fr/libs/basics/#babypass1"});
    tokens.add({"ba.bypass2", "ba.bypass2(bpc,e)", "https://faustlibraries.grame.fr/libs/basics/#babypass2"});
    tokens.add({"ba.bypass1to2", "ba.bypass1to2(bpc,e)", "https://faustlibraries.grame.fr/libs/basics/#babypass1to2"});
    tokens.add({"ba.bypass_fade", "ba.bypass_fade(n,b,e)", "https://faustlibraries.grame.fr/libs/basics/#babypass_fade"});
    tokens.add({"ba.toggle", "ba.toggle", "https://faustlibraries.grame.fr/libs/basics/#batoggle"});
    tokens.add({"ba.on_and_off", "ba.on_and_off", "https://faustlibraries.grame.fr/libs/basics/#baon_and_off"});
    tokens.add({"ba.slidingReduce", "ba.slidingReduce(op,N,maxN,disabledVal)", "https://faustlibraries.grame.fr/libs/basics/#baslidingreduce"});
    tokens.add({"ba.slidingSum", "ba.slidingSum(N)", "https://faustlibraries.grame.fr/libs/basics/#baslidingsum"});
    tokens.add({"ba.slidingSump", "ba.slidingSump(N,maxN)", "https://faustlibraries.grame.fr/libs/basics/#baslidingsump"});
    tokens.add({"ba.slidingMax", "ba.slidingMax(N,maxN)", "https://faustlibraries.grame.fr/libs/basics/#baslidingmax"});
    tokens.add({"ba.slidingMin", "ba.slidingMin(N,maxN)", "https://faustlibraries.grame.fr/libs/basics/#baslidingmin"});
    tokens.add({"ba.slidingMean", "ba.slidingMean(N,maxN)", "https://faustlibraries.grame.fr/libs/basics/#baslidingmean"});
    tokens.add({"ba.slidingMeanp", "ba.slidingMeanp(N,maxN)", "https://faustlibraries.grame.fr/libs/basics/#baslidingmeanp"});
    tokens.add({"ba.slidingRMSp", "ba.slidingRMSp(N,maxN)", "https://faustlibraries.grame.fr/libs/basics/#baslidingrmsp"});
    tokens.add({"ba.parallelOp", "", "https://faustlibraries.grame.fr/libs/basics/#baparallelop"});
    tokens.add({"ba.parallelMax", "ba.parallelMax(n)", "https://faustlibraries.grame.fr/libs/basics/#baparallelmax"});
    tokens.add({"ba.parallelMin", "ba.parallelMin(n)", "https://faustlibraries.grame.fr/libs/basics/#baparallelmin"});
    tokens.add({"ba.parallelMean", "ba.parallelMean(n)", "https://faustlibraries.grame.fr/libs/basics/#baparallelmean"});
    tokens.add({"ba.parallelRMS", "ba.parallelRMS(n)", "https://faustlibraries.grame.fr/libs/basics/#baparallelrms"});
    tokens.add({"co.peak_compression_gain_mono", "co.peak_compression_gain_mono(strength,thresh,att,rel,knee,prePost)", "https://faustlibraries.grame.fr/libs/compressors/#copeak_compression_gain_mono"});
    tokens.add({"co.peak_compression_gain_N_chan", "co.peak_compression_gain_N_chan(strength,thresh,att,rel,knee,prePost,link,N)", "https://faustlibraries.grame.fr/libs/compressors/#copeak_compression_gain_n_chan"});
    tokens.add({"co.FFcompressor_N_chan", "co.FFcompressor_N_chan(strength,thresh,att,rel,knee,prePost,link,meter,N)", "https://faustlibraries.grame.fr/libs/compressors/#coffcompressor_n_chan"});
    tokens.add({"co.FBcompressor_N_chan", "co.FBcompressor_N_chan(strength,thresh,att,rel,knee,prePost,link,meter,N)", "https://faustlibraries.grame.fr/libs/compressors/#cofbcompressor_n_chan"});
    tokens.add({"co.FBFFcompressor_N_chan", "co.FBFFcompressor_N_chan(strength,thresh,att,rel,knee,prePost,link,FBFF,meter,N)", "https://faustlibraries.grame.fr/libs/compressors/#cofbffcompressor_n_chan"});
    tokens.add({"co.RMS_compression_gain_mono", "co.RMS_compression_gain_mono(strength,thresh,att,rel,knee,prePost)", "https://faustlibraries.grame.fr/libs/compressors/#corms_compression_gain_mono"});
    tokens.add({"co.RMS_compression_gain_N_chan", "co.RMS_compression_gain_N_chan(strength,thresh,att,rel,knee,prePost,link,N)", "https://faustlibraries.grame.fr/libs/compressors/#corms_compression_gain_n_chan"});
    tokens.add({"co.RMS_FBFFcompressor_N_chan", "co.RMS_FBFFcompressor_N_chan(strength,thresh,att,rel,knee,prePost,link,FBFF,meter,N)", "https://faustlibraries.grame.fr/libs/compressors/#corms_fbffcompressor_n_chan"});
    tokens.add({"co.RMS_FBcompressor_peak_limiter_N_chan", "co.RMS_FBcompressor_peak_limiter_N_chan(strength,thresh,threshLim,att,rel,knee,link,meter,meterLim,N)", "https://faustlibraries.grame.fr/libs/compressors/#corms_fbcompressor_peak_limiter_n_chan"});
    tokens.add({"co.compressor_lad_mono", "co.compressor_lad_mono(lad,ratio,thresh,att,rel)", "https://faustlibraries.grame.fr/libs/compressors/#cocompressor_lad_mono"});
    tokens.add({"co.compressor_mono", "co.compressor_mono(ratio,thresh,att,rel)", "https://faustlibraries.grame.fr/libs/compressors/#cocompressor_mono"});
    tokens.add({"co.compressor_stereo", "co.compressor_stereo(ratio,thresh,att,rel)", "https://faustlibraries.grame.fr/libs/compressors/#cocompressor_stereo"});
    tokens.add({"co.compression_gain_mono", "co.compression_gain_mono(ratio,thresh,att,rel)", "https://faustlibraries.grame.fr/libs/compressors/#cocompression_gain_mono"});
    tokens.add({"co.limiter_1176_R4_mono", "co.limiter_1176_R4_mono", "https://faustlibraries.grame.fr/libs/compressors/#colimiter_1176_r4_mono"});
    tokens.add({"co.limiter_1176_R4_stereo", "co.limiter_1176_R4_stereo", "https://faustlibraries.grame.fr/libs/compressors/#colimiter_1176_r4_stereo"});
    tokens.add({"co.limiter_lad_N", "co.limiter_lad_N(N, LD, ceiling, attack, hold, release)", "https://faustlibraries.grame.fr/libs/compressors/#colimiter_lad_n"});
    tokens.add({"co.limiter_lad_mono", "co.limiter_lad_mono(LD, ceiling, attack, hold, release)", "https://faustlibraries.grame.fr/libs/compressors/#colimiter_lad_mono"});
    tokens.add({"co.limiter_lad_stereo", "co.limiter_lad_stereo(LD, ceiling, attack, hold, release)", "https://faustlibraries.grame.fr/libs/compressors/#colimiter_lad_stereo"});
    tokens.add({"co.limiter_lad_quad", "co.limiter_lad_quad(LD, ceiling, attack, hold, release)", "https://faustlibraries.grame.fr/libs/compressors/#colimiter_lad_quad"});
    tokens.add({"co.limiter_lad_bw", "co.limiter_lad_bw", "https://faustlibraries.grame.fr/libs/compressors/#colimiter_lad_bw"});
    tokens.add({"de.delay", "de.delay(n,d)", "https://faustlibraries.grame.fr/libs/delays/#dedelay"});
    tokens.add({"de.sdelay", "de.sdelay(n,it,dt)", "https://faustlibraries.grame.fr/libs/delays/#desdelay"});
    tokens.add({"de.fdelay[n]", "", "https://faustlibraries.grame.fr/libs/delays/#defdelay[n]"});
    tokens.add({"de.fdelay[n]a", "_ : fdelay[N]a(maxdelay, delay, inputsignal) : _", "https://faustlibraries.grame.fr/libs/delays/#defdelay[n]a"});
    tokens.add({"dm.mth_octave_spectral_level_demo", "dm.mth_octave_spectral_level_demo(BandsPerOctave)", "https://faustlibraries.grame.fr/libs/demos/#dmmth_octave_spectral_level_demo"});
    tokens.add({"dm.parametric_eq_demo", "dm.parametric_eq_demo", "https://faustlibraries.grame.fr/libs/demos/#dmparametric_eq_demo"});
    tokens.add({"dm.spectral_tilt_demo", "dm.spectral_tilt_demo(N)", "https://faustlibraries.grame.fr/libs/demos/#dmspectral_tilt_demo"});
    tokens.add({"dm.cubicnl_demo", "dm.cubicnl_demo", "https://faustlibraries.grame.fr/libs/demos/#dmcubicnl_demo"});
    tokens.add({"dm.gate_demo", "dm.gate_demo", "https://faustlibraries.grame.fr/libs/demos/#dmgate_demo"});
    tokens.add({"dm.compressor_demo", "dm.compressor_demo", "https://faustlibraries.grame.fr/libs/demos/#dmcompressor_demo"});
    tokens.add({"dm.moog_vcf_demo", "dm.moog_vcf_demo", "https://faustlibraries.grame.fr/libs/demos/#dmmoog_vcf_demo"});
    tokens.add({"dm.wah4_demo", "dm.wah4_demo", "https://faustlibraries.grame.fr/libs/demos/#dmwah4_demo"});
    tokens.add({"dm.crybaby_demo", "dm.crybaby_demo", "https://faustlibraries.grame.fr/libs/demos/#dmcrybaby_demo"});
    tokens.add({"dm.flanger_demo", "dm.flanger_demo", "https://faustlibraries.grame.fr/libs/demos/#dmflanger_demo"});
    tokens.add({"dm.phaser2_demo", "dm.phaser2_demo", "https://faustlibraries.grame.fr/libs/demos/#dmphaser2_demo"});
    tokens.add({"dm.freeverb_demo", "dm.freeverb_demo", "https://faustlibraries.grame.fr/libs/demos/#dmfreeverb_demo"});
    tokens.add({"dm.stereo_reverb_tester", "dm.stereo_reverb_tester", "https://faustlibraries.grame.fr/libs/demos/#dmstereo_reverb_tester"});
    tokens.add({"dm.fdnrev0_demo", "dm.fdnrev0_demo(N,NB,BBSO)", "https://faustlibraries.grame.fr/libs/demos/#dmfdnrev0_demo"});
    tokens.add({"dm.zita_rev_fdn_demo", "dm.zita_rev_fdn_demo", "https://faustlibraries.grame.fr/libs/demos/#dmzita_rev_fdn_demo"});
    tokens.add({"dm.zita_light", "dm.zita_light", "https://faustlibraries.grame.fr/libs/demos/#dmzita_light"});
    tokens.add({"dm.zita_rev1", "dm.zita_rev1", "https://faustlibraries.grame.fr/libs/demos/#dmzita_rev1"});
    tokens.add({"dm.dattorro_rev_demo", "dm.dattorro_rev_demo", "https://faustlibraries.grame.fr/libs/demos/#dmdattorro_rev_demo"});
    tokens.add({"dm.jprev_demo", "dm.jprev_demo", "https://faustlibraries.grame.fr/libs/demos/#dmjprev_demo"});
    tokens.add({"dm.greyhole_demo", "dm.greyhole_demo", "https://faustlibraries.grame.fr/libs/demos/#dmgreyhole_demo"});
    tokens.add({"dm.sawtooth_demo", "dm.sawtooth_demo", "https://faustlibraries.grame.fr/libs/demos/#dmsawtooth_demo"});
    tokens.add({"dm.virtual_analog_oscillator_demo", "dm.virtual_analog_oscillator_demo", "https://faustlibraries.grame.fr/libs/demos/#dmvirtual_analog_oscillator_demo"});
    tokens.add({"dm.velvet_noise_demo", "dm.velvet_noise_demo", "https://faustlibraries.grame.fr/libs/demos/#dmvelvet_noise_demo"});
    tokens.add({"dm.latch_demo", "echo 'import(\"stdfaust.lib\");' > latch_demo.dsp", "https://faustlibraries.grame.fr/libs/demos/#dmlatch_demo"});
    tokens.add({"dm.envelopes_demo", "echo 'import(\"stdfaust.lib\");' > envelopes_demo.dsp", "https://faustlibraries.grame.fr/libs/demos/#dmenvelopes_demo"});
    tokens.add({"dm.fft_spectral_level_demo", "echo 'import(\"stdfaust.lib\");' > fft_spectral_level_demo.dsp", "https://faustlibraries.grame.fr/libs/demos/#dmfft_spectral_level_demo"});
    tokens.add({"dm.reverse_echo_demo(nChans)", "echo 'import(\"stdfaust.lib\");' > reverse_echo_demo.dsp", "https://faustlibraries.grame.fr/libs/demos/#dmreverse_echo_demo(nchans)"});
    tokens.add({"dm.pospass_demo", "echo 'import(\"stdfaust.lib\");' > pospass_demo.dsp", "https://faustlibraries.grame.fr/libs/demos/#dmpospass_demo"});
    tokens.add({"dm.exciter", "dm.exciter", "https://faustlibraries.grame.fr/libs/demos/#dmexciter"});
    tokens.add({"dm.vocoder_demo", "dm.vocoder_demo", "https://faustlibraries.grame.fr/libs/demos/#dmvocoder_demo"});
    tokens.add({"dx.dx7_ampf", "dx.dx7_ampf_bpf", "https://faustlibraries.grame.fr/libs/dx7/#dxdx7_ampf"});
    tokens.add({"dx.dx7_egraterisef", "dx.dx7_egraterisef", "https://faustlibraries.grame.fr/libs/dx7/#dxdx7_egraterisef"});
    tokens.add({"dx.dx7_egraterisepercf", "dx.dx7_egraterisepercf", "https://faustlibraries.grame.fr/libs/dx7/#dxdx7_egraterisepercf"});
    tokens.add({"dx.dx7_egratedecayf", "dx.dx7_egratedecayf", "https://faustlibraries.grame.fr/libs/dx7/#dxdx7_egratedecayf"});
    tokens.add({"dx.dx7_egratedecaypercf", "dx.dx7_egratedecaypercf", "https://faustlibraries.grame.fr/libs/dx7/#dxdx7_egratedecaypercf"});
    tokens.add({"dx.dx7_eglv2peakf", "dx.dx7_eglv2peakf", "https://faustlibraries.grame.fr/libs/dx7/#dxdx7_eglv2peakf"});
    tokens.add({"dx.dx7_velsensf", "dx.dx7_velsensf", "https://faustlibraries.grame.fr/libs/dx7/#dxdx7_velsensf"});
    tokens.add({"dx.dx7_fdbkscalef", "dx.dx7_fdbkscalef", "https://faustlibraries.grame.fr/libs/dx7/#dxdx7_fdbkscalef"});
    tokens.add({"dx.dx7_op", "dx.dx7_op(freq,phaseMod,outLev,R1,R2,R3,R4,L1,L2,L3,L4,keyVel,rateScale,type,gain,gate)", "https://faustlibraries.grame.fr/libs/dx7/#dxdx7_op"});
    tokens.add({"dx.dx7_algo", "dx.dx7_algo(algN,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)", "https://faustlibraries.grame.fr/libs/dx7/#dxdx7_algo"});
    tokens.add({"dx.dx7_ui", "dx.dx7_ui", "https://faustlibraries.grame.fr/libs/dx7/#dxdx7_ui"});
    tokens.add({"en.smoothEnvelope", "en.smoothEnvelope(ar,t)", "https://faustlibraries.grame.fr/libs/envelopes/#ensmoothenvelope"});
    tokens.add({"en.ar", "en.ar(at,rt,t)", "https://faustlibraries.grame.fr/libs/envelopes/#enar"});
    tokens.add({"en.arfe", "en.arfe(a,r,f,t)", "https://faustlibraries.grame.fr/libs/envelopes/#enarfe"});
    tokens.add({"en.are", "en.are(a,r,g)", "https://faustlibraries.grame.fr/libs/envelopes/#enare"});
    tokens.add({"en.asr", "en.asr(at,sl,rt,t)", "https://faustlibraries.grame.fr/libs/envelopes/#enasr"});
    tokens.add({"en.adsr", "en.adsr(at,dt,sl,rt,gate)", "https://faustlibraries.grame.fr/libs/envelopes/#enadsr"});
    tokens.add({"en.adsre", "en.adsre(a,d,s,r,g)", "https://faustlibraries.grame.fr/libs/envelopes/#enadsre"});
    tokens.add({"en.asre", "en.asre(a,s,r,g)", "https://faustlibraries.grame.fr/libs/envelopes/#enasre"});
    tokens.add({"en.dx7envelope", "dx7_envelope(R1,R2,R3,R4,L1,L2,L3,L4,t) : _", "https://faustlibraries.grame.fr/libs/envelopes/#endx7envelope"});
    tokens.add({"fd.model1D", "fd.model1D(points,R,T,scheme)", "https://faustlibraries.grame.fr/libs/fds/#fdmodel1d"});
    tokens.add({"fd.model2D", "fd.model2D(pointsX,pointsY,R,T,scheme)", "https://faustlibraries.grame.fr/libs/fds/#fdmodel2d"});
    tokens.add({"fd.stairsInterp1D", "fd.stairsInterp1D(points,point)", "https://faustlibraries.grame.fr/libs/fds/#fdstairsinterp1d"});
    tokens.add({"fd.stairsInterp2D", "fd.stairsInterp2D(pointsX,pointsY,pointX,pointY)", "https://faustlibraries.grame.fr/libs/fds/#fdstairsinterp2d"});
    tokens.add({"fd.linInterp1D", "fd.linInterp1D(points,point)", "https://faustlibraries.grame.fr/libs/fds/#fdlininterp1d"});
    tokens.add({"fd.linInterp2D", "fd.linInterp2D(pointsX,pointsY,pointX,pointY)", "https://faustlibraries.grame.fr/libs/fds/#fdlininterp2d"});
    tokens.add({"fd.stairsInterp1DOut", "fd.stairsInterp1DOut(points,point)", "https://faustlibraries.grame.fr/libs/fds/#fdstairsinterp1dout"});
    tokens.add({"fd.stairsInterp2DOut", "fd.stairsInterp2DOut(pointsX,pointsY,pointX,pointY)", "https://faustlibraries.grame.fr/libs/fds/#fdstairsinterp2dout"});
    tokens.add({"fd.linInterp1DOut", "fd.linInterp1DOut(points,point)", "https://faustlibraries.grame.fr/libs/fds/#fdlininterp1dout"});
    tokens.add({"fd.stairsInterp2DOut", "si.bus(pointsX*pointsY) : linInterp2DOut(pointsX,pointsY,pointX,pointY) : _", "https://faustlibraries.grame.fr/libs/fds/#fdstairsinterp2dout"});
    tokens.add({"fd.route1D", "fd.route1D(points, R, T)", "https://faustlibraries.grame.fr/libs/fds/#fdroute1d"});
    tokens.add({"fd.route2D", "si.bus((2*R+1)^2*(T+1)*pointsX*pointsY),si.bus(pointsX*pointsY*2) :", "https://faustlibraries.grame.fr/libs/fds/#fdroute2d"});
    tokens.add({"fd.schemePoint", "fd.schemePoint(R,T,D)", "https://faustlibraries.grame.fr/libs/fds/#fdschemepoint"});
    tokens.add({"fd.buildScheme1D", "fd.buildScheme1D(points,R,T)", "https://faustlibraries.grame.fr/libs/fds/#fdbuildscheme1d"});
    tokens.add({"fd.buildScheme2D", "si.bus((1 + ((2*R+1)^2*(T+1)) + (2*R+1)^2)*pointsX*pointsY) :", "https://faustlibraries.grame.fr/libs/fds/#fdbuildscheme2d"});
    tokens.add({"fd.hammer", "fd.hammer(coeff,omega0Sqr,sigma0,kH,alpha,k,offset,fIn)", "https://faustlibraries.grame.fr/libs/fds/#fdhammer"});
    tokens.add({"fd.bow", "fd.bow(coeff,alpha,k,vb)", "https://faustlibraries.grame.fr/libs/fds/#fdbow"});
    tokens.add({"fi.zero", "fi.zero(z)", "https://faustlibraries.grame.fr/libs/filters/#fizero"});
    tokens.add({"fi.pole", "fi.pole(p)", "https://faustlibraries.grame.fr/libs/filters/#fipole"});
    tokens.add({"fi.integrator", "", "https://faustlibraries.grame.fr/libs/filters/#fiintegrator"});
    tokens.add({"fi.dcblockerat", "fi.dcblockerat(fb)", "https://faustlibraries.grame.fr/libs/filters/#fidcblockerat"});
    tokens.add({"fi.dcblocker", "fi.dcblocker", "https://faustlibraries.grame.fr/libs/filters/#fidcblocker"});
    tokens.add({"fi.lptN", "fi.lptN(N, tN)", "https://faustlibraries.grame.fr/libs/filters/#filptn"});
    tokens.add({"fi.ff_comb", "fi.ff_comb(maxdel,intdel,b0,bM)", "https://faustlibraries.grame.fr/libs/filters/#fiff_comb"});
    tokens.add({"fi.ff_fcomb", "fi.ff_fcomb(maxdel,del,b0,bM)", "https://faustlibraries.grame.fr/libs/filters/#fiff_fcomb"});
    tokens.add({"fi.ffcombfilter", "", "https://faustlibraries.grame.fr/libs/filters/#fiffcombfilter"});
    tokens.add({"fi.fb_comb", "fi.fb_comb(maxdel,intdel,b0,aN)", "https://faustlibraries.grame.fr/libs/filters/#fifb_comb"});
    tokens.add({"fi.fb_fcomb", "fi.fb_fcomb(maxdel,del,b0,aN)", "https://faustlibraries.grame.fr/libs/filters/#fifb_fcomb"});
    tokens.add({"fi.rev1", "", "https://faustlibraries.grame.fr/libs/filters/#firev1"});
    tokens.add({"fi.allpass_comb", "fi.allpass_comb(maxdel,intdel,aN)", "https://faustlibraries.grame.fr/libs/filters/#fiallpass_comb"});
    tokens.add({"fi.allpass_fcomb", "_ : allpass_comb(maxdel,intdel,aN) : _", "https://faustlibraries.grame.fr/libs/filters/#fiallpass_fcomb"});
    tokens.add({"fi.rev2", "", "https://faustlibraries.grame.fr/libs/filters/#firev2"});
    tokens.add({"fi.iir", "fi.iir(bcoeffs,acoeffs)", "https://faustlibraries.grame.fr/libs/filters/#fiiir"});
    tokens.add({"fi.fir", "fi.fir(bv)", "https://faustlibraries.grame.fr/libs/filters/#fifir"});
    tokens.add({"fi.notchw", "fi.notchw(width,freq)", "https://faustlibraries.grame.fr/libs/filters/#finotchw"});
    tokens.add({"fi.av2sv", "sv = av2sv(av)", "https://faustlibraries.grame.fr/libs/filters/#fiav2sv"});
    tokens.add({"fi.bvav2nuv", "nuv = bvav2nuv(bv,av)", "https://faustlibraries.grame.fr/libs/filters/#fibvav2nuv"});
    tokens.add({"fi.iir_lat2", "fi.iir_lat2(bv,av)", "https://faustlibraries.grame.fr/libs/filters/#fiiir_lat2"});
    tokens.add({"fi.allpassnt", "fi.allpassnt(n,sv)", "https://faustlibraries.grame.fr/libs/filters/#fiallpassnt"});
    tokens.add({"fi.iir_kl", "fi.iir_kl(bv,av)", "https://faustlibraries.grame.fr/libs/filters/#fiiir_kl"});
    tokens.add({"fi.allpassnklt", "fi.allpassnklt(n,sv)", "https://faustlibraries.grame.fr/libs/filters/#fiallpassnklt"});
    tokens.add({"fi.iir_lat1", "fi.iir_lat1(bv,av)", "https://faustlibraries.grame.fr/libs/filters/#fiiir_lat1"});
    tokens.add({"fi.allpassn1mt", "fi.allpassn1mt(N,sv)", "https://faustlibraries.grame.fr/libs/filters/#fiallpassn1mt"});
    tokens.add({"fi.iir_nl", "fi.iir_nl(bv,av)", "https://faustlibraries.grame.fr/libs/filters/#fiiir_nl"});
    tokens.add({"fi.allpassnnlt", "fi.allpassnnlt(N,sv)", "https://faustlibraries.grame.fr/libs/filters/#fiallpassnnlt"});
    tokens.add({"fi.tf2np", "fi.tf2np(b0,b1,b2,a1,a2)", "https://faustlibraries.grame.fr/libs/filters/#fitf2np"});
    tokens.add({"fi.wgr", "fi.wgr(f,r)", "https://faustlibraries.grame.fr/libs/filters/#fiwgr"});
    tokens.add({"fi.nlf2", "fi.nlf2(f,r)", "https://faustlibraries.grame.fr/libs/filters/#finlf2"});
    tokens.add({"fi.apnl", "fi.apnl(a1,a2)", "https://faustlibraries.grame.fr/libs/filters/#fiapnl"});
    tokens.add({"fi.allpassn", "fi.allpassn(n,sv)", "https://faustlibraries.grame.fr/libs/filters/#fiallpassn"});
    tokens.add({"fi.allpassnn", "fi.allpassnn(n,tv)", "https://faustlibraries.grame.fr/libs/filters/#fiallpassnn"});
    tokens.add({"fi.allpassnkl", "fi.allpassnkl(n,sv)", "https://faustlibraries.grame.fr/libs/filters/#fiallpassnkl"});
    tokens.add({"fi.allpass1m", "_ : allpassn1m(n,sv) : _", "https://faustlibraries.grame.fr/libs/filters/#fiallpass1m"});
    tokens.add({"fi.tf1snp", "fi.tf1snp(b1,b0,a0)", "https://faustlibraries.grame.fr/libs/filters/#fitf1snp"});
    tokens.add({"fi.tf3slf", "fi.tf3slf(b3,b2,b1,b0,a3,a2,a1,a0)", "https://faustlibraries.grame.fr/libs/filters/#fitf3slf"});
    tokens.add({"fi.tf1s", "fi.tf1s(b1,b0,a0,w1)", "https://faustlibraries.grame.fr/libs/filters/#fitf1s"});
    tokens.add({"fi.tf2sb", "fi.tf2sb(b2,b1,b0,a1,a0,w1,wc)", "https://faustlibraries.grame.fr/libs/filters/#fitf2sb"});
    tokens.add({"fi.tf1sb", "fi.tf1sb(b1,b0,a0,w1,wc)", "https://faustlibraries.grame.fr/libs/filters/#fitf1sb"});
    tokens.add({"fi.resonlp", "fi.resonlp(fc,Q,gain)", "https://faustlibraries.grame.fr/libs/filters/#firesonlp"});
    tokens.add({"fi.resonhp", "_ : resonlp(fc,Q,gain) : _", "https://faustlibraries.grame.fr/libs/filters/#firesonhp"});
    tokens.add({"fi.resonbp", "_ : resonlp(fc,Q,gain) : _", "https://faustlibraries.grame.fr/libs/filters/#firesonbp"});
    tokens.add({"fi.lowpass", "fi.lowpass(N,fc)", "https://faustlibraries.grame.fr/libs/filters/#filowpass"});
    tokens.add({"fi.highpass", "fi.highpass(N,fc)", "https://faustlibraries.grame.fr/libs/filters/#fihighpass"});
    tokens.add({"fi.lowpass3e", "fi.lowpass3e(fc)", "https://faustlibraries.grame.fr/libs/filters/#filowpass3e"});
    tokens.add({"fi.lowpass6e", "fi.lowpass6e(fc)", "https://faustlibraries.grame.fr/libs/filters/#filowpass6e"});
    tokens.add({"fi.highpass3e", "fi.highpass3e(fc)", "https://faustlibraries.grame.fr/libs/filters/#fihighpass3e"});
    tokens.add({"fi.highpass6e", "fi.highpass6e(fc)", "https://faustlibraries.grame.fr/libs/filters/#fihighpass6e"});
    tokens.add({"fi.bandpass", "fi.bandpass(Nh,fl,fu)", "https://faustlibraries.grame.fr/libs/filters/#fibandpass"});
    tokens.add({"fi.bandstop", "fi.bandstop(Nh,fl,fu)", "https://faustlibraries.grame.fr/libs/filters/#fibandstop"});
    tokens.add({"fi.bandpass6e", "", "https://faustlibraries.grame.fr/libs/filters/#fibandpass6e"});
    tokens.add({"fi.bandpass12e", "", "https://faustlibraries.grame.fr/libs/filters/#fibandpass12e"});
    tokens.add({"fi.pospass", "fi.pospass(N,fc)", "https://faustlibraries.grame.fr/libs/filters/#fipospass"});
    tokens.add({"fi.low_shelf", "_ : lowshelf(N,L0,fx) : _", "https://faustlibraries.grame.fr/libs/filters/#filow_shelf"});
    tokens.add({"fi.high_shelf", "_ : highshelf(N,Lpi,fx) : _", "https://faustlibraries.grame.fr/libs/filters/#fihigh_shelf"});
    tokens.add({"fi.peak_eq", "fi.peak_eq(Lfx,fx,B)", "https://faustlibraries.grame.fr/libs/filters/#fipeak_eq"});
    tokens.add({"fi.peak_eq_cq", "fi.peak_eq_cq(Lfx,fx,Q)", "https://faustlibraries.grame.fr/libs/filters/#fipeak_eq_cq"});
    tokens.add({"fi.peak_eq_rm", "fi.peak_eq_rm(Lfx,fx,tanPiBT)", "https://faustlibraries.grame.fr/libs/filters/#fipeak_eq_rm"});
    tokens.add({"fi.spectral_tilt", "fi.spectral_tilt(N,f0,bw,alpha)", "https://faustlibraries.grame.fr/libs/filters/#fispectral_tilt"});
    tokens.add({"fi.levelfilter", "fi.levelfilter(L,freq)", "https://faustlibraries.grame.fr/libs/filters/#filevelfilter"});
    tokens.add({"fi.levelfilterN", "fi.levelfilterN(N,freq,L)", "https://faustlibraries.grame.fr/libs/filters/#filevelfiltern"});
    tokens.add({"fi.mth_octave_filterbank[n]", "_ : mth_octave_filterbank(O,M,ftop,N) : par(i,N,_)     // Oth-order", "https://faustlibraries.grame.fr/libs/filters/#fimth_octave_filterbank[n]"});
    tokens.add({"fi.filterbank", "fi.filterbank (O,freqs)", "https://faustlibraries.grame.fr/libs/filters/#fifilterbank"});
    tokens.add({"fi.filterbanki", "fi.filterbanki(O,freqs)", "https://faustlibraries.grame.fr/libs/filters/#fifilterbanki"});
    tokens.add({"fi.svf", "fi.svf.xx(freq, Q, [gain])", "https://faustlibraries.grame.fr/libs/filters/#fisvf"});
    tokens.add({"fi.avg_rect", "fi.avg_rect(period)", "https://faustlibraries.grame.fr/libs/filters/#fiavg_rect"});
    tokens.add({"ho.encoder", "ho.encoder(n, x, a)", "https://faustlibraries.grame.fr/libs/hoa/#hoencoder"});
    tokens.add({"ho.decoder", "ho.decoder(n, p)", "https://faustlibraries.grame.fr/libs/hoa/#hodecoder"});
    tokens.add({"ho.decoderStereo", "ho.decoderStereo(n)", "https://faustlibraries.grame.fr/libs/hoa/#hodecoderstereo"});
    tokens.add({"ho.optimBasic", "ho.optimBasic(n)", "https://faustlibraries.grame.fr/libs/hoa/#hooptimbasic"});
    tokens.add({"ho.optimMaxRe", "ho.optimMaxRe(n)", "https://faustlibraries.grame.fr/libs/hoa/#hooptimmaxre"});
    tokens.add({"ho.optimInPhase", "ho.optimInPhase(n)", "https://faustlibraries.grame.fr/libs/hoa/#hooptiminphase"});
    tokens.add({"ho.wider", "ho.wider(n,w)", "https://faustlibraries.grame.fr/libs/hoa/#howider"});
    tokens.add({"ho.map", "map(n, x, r, a)", "https://faustlibraries.grame.fr/libs/hoa/#homap"});
    tokens.add({"ho.rotate", "ho.rotate(n, a)", "https://faustlibraries.grame.fr/libs/hoa/#horotate"});
    tokens.add({"ho.encoder3D", "ho.encoder3D(n, x, a, e)", "https://faustlibraries.grame.fr/libs/hoa/#hoencoder3d"});
    tokens.add({"ho.optimBasic3D", "ho.optimBasic3D(n)", "https://faustlibraries.grame.fr/libs/hoa/#hooptimbasic3d"});
    tokens.add({"ho.optimMaxRe3D", "ho.optimMaxRe3D(n)", "https://faustlibraries.grame.fr/libs/hoa/#hooptimmaxre3d"});
    tokens.add({"ho.optimInPhase3D", "ho.optimInPhase3D(n)", "https://faustlibraries.grame.fr/libs/hoa/#hooptiminphase3d"});
    tokens.add({"it.interpolate_linear", "it.interpolate_linear(dv,v0,v1)", "https://faustlibraries.grame.fr/libs/interpolators/#itinterpolate_linear"});
    tokens.add({"it.interpolate_cosine", "it.interpolate_cosine(dv,v0,v1)", "https://faustlibraries.grame.fr/libs/interpolators/#itinterpolate_cosine"});
    tokens.add({"it.interpolate_cubic", "it.interpolate_cubic(dv,v0,v1,v2,v3)", "https://faustlibraries.grame.fr/libs/interpolators/#itinterpolate_cubic"});
    tokens.add({"it.interpolator_two_points", "it.interpolator_two_points(gen, idv, interpolate_two_points)", "https://faustlibraries.grame.fr/libs/interpolators/#itinterpolator_two_points"});
    tokens.add({"it.interpolator_linear", "it.interpolator_linear(gen, idv)", "https://faustlibraries.grame.fr/libs/interpolators/#itinterpolator_linear"});
    tokens.add({"it.interpolator_cosine", "it.interpolator_cosine(gen, idv)", "https://faustlibraries.grame.fr/libs/interpolators/#itinterpolator_cosine"});
    tokens.add({"it.interpolator_four_points", "it.interpolator_four_points(gen, idv, interpolate_four_points)", "https://faustlibraries.grame.fr/libs/interpolators/#itinterpolator_two_points"});
    tokens.add({"it.interpolator_cubic", "it.interpolator_cubic(gen, idv)", "https://faustlibraries.grame.fr/libs/interpolators/#itinterpolator_cubic"});
    tokens.add({"it.interpolator_select", "it.interpolator_select(gen, idv, sel)", "https://faustlibraries.grame.fr/libs/interpolators/#itinterpolator_select"});
    tokens.add({"ma.SR", "ma.SR", "https://faustlibraries.grame.fr/libs/maths/#masr"});
    tokens.add({"ma.T", "ma.T", "https://faustlibraries.grame.fr/libs/maths/#mat"});
    tokens.add({"ma.BS", "ma.BS", "https://faustlibraries.grame.fr/libs/maths/#mabs"});
    tokens.add({"ma.PI", "ma.PI", "https://faustlibraries.grame.fr/libs/maths/#mapi"});
    tokens.add({"ma.E", "ma.E", "https://faustlibraries.grame.fr/libs/maths/#mae"});
    tokens.add({"ma.EPSILON", "ma.EPSILON", "https://faustlibraries.grame.fr/libs/maths/#maepsilon"});
    tokens.add({"ma.MIN", "ma.MIN", "https://faustlibraries.grame.fr/libs/maths/#mamin"});
    tokens.add({"ma.MAX", "ma.MAX", "https://faustlibraries.grame.fr/libs/maths/#mamax"});
    tokens.add({"ma.FTZ", "ma.FTZ", "https://faustlibraries.grame.fr/libs/maths/#maftz"});
    tokens.add({"ma.copysign", "ma.copysign", "https://faustlibraries.grame.fr/libs/maths/#macopysign"});
    tokens.add({"ma.neg", "ma.neg", "https://faustlibraries.grame.fr/libs/maths/#maneg"});
    tokens.add({"ma.sub(x,y)", "_,_ : sub : _", "https://faustlibraries.grame.fr/libs/maths/#masub(x,y)"});
    tokens.add({"ma.inv", "ma.inv", "https://faustlibraries.grame.fr/libs/maths/#mainv"});
    tokens.add({"ma.cbrt", "ma.cbrt", "https://faustlibraries.grame.fr/libs/maths/#macbrt"});
    tokens.add({"ma.hypot", "ma.hypot", "https://faustlibraries.grame.fr/libs/maths/#mahypot"});
    tokens.add({"ma.ldexp", "ma.ldexp", "https://faustlibraries.grame.fr/libs/maths/#maldexp"});
    tokens.add({"ma.scalb", "ma.scalb", "https://faustlibraries.grame.fr/libs/maths/#mascalb"});
    tokens.add({"ma.log1p", "ma.log1p", "https://faustlibraries.grame.fr/libs/maths/#malog1p"});
    tokens.add({"ma.logb", "ma.logb", "https://faustlibraries.grame.fr/libs/maths/#malogb"});
    tokens.add({"ma.ilogb", "ma.ilogb", "https://faustlibraries.grame.fr/libs/maths/#mailogb"});
    tokens.add({"ma.log2", "ma.log2", "https://faustlibraries.grame.fr/libs/maths/#malog2"});
    tokens.add({"ma.expm1", "ma.expm1", "https://faustlibraries.grame.fr/libs/maths/#maexpm1"});
    tokens.add({"ma.acosh", "ma.acosh", "https://faustlibraries.grame.fr/libs/maths/#maacosh"});
    tokens.add({"ma.asinh", "ma.asinh", "https://faustlibraries.grame.fr/libs/maths/#maasinh"});
    tokens.add({"ma.atanh", "ma.atanh", "https://faustlibraries.grame.fr/libs/maths/#maatanh"});
    tokens.add({"ma.sinh", "ma.sinh", "https://faustlibraries.grame.fr/libs/maths/#masinh"});
    tokens.add({"ma.cosh", "ma.cosh", "https://faustlibraries.grame.fr/libs/maths/#macosh"});
    tokens.add({"ma.tanh", "ma.tanh", "https://faustlibraries.grame.fr/libs/maths/#matanh"});
    tokens.add({"ma.erf", "ma.erf", "https://faustlibraries.grame.fr/libs/maths/#maerf"});
    tokens.add({"ma.erfc", "ma.erfc", "https://faustlibraries.grame.fr/libs/maths/#maerfc"});
    tokens.add({"ma.gamma", "ma.gamma", "https://faustlibraries.grame.fr/libs/maths/#magamma"});
    tokens.add({"ma.lgamma", "ma.lgamma", "https://faustlibraries.grame.fr/libs/maths/#malgamma"});
    tokens.add({"ma.J0", "ma.J0", "https://faustlibraries.grame.fr/libs/maths/#maj0"});
    tokens.add({"ma.J1", "ma.J1", "https://faustlibraries.grame.fr/libs/maths/#maj1"});
    tokens.add({"ma.Jn", "ma.Jn", "https://faustlibraries.grame.fr/libs/maths/#majn"});
    tokens.add({"ma.Y0", "ma.Y0", "https://faustlibraries.grame.fr/libs/maths/#may0"});
    tokens.add({"ma.Y1", "_ : Y0 : _", "https://faustlibraries.grame.fr/libs/maths/#may1"});
    tokens.add({"ma.Yn", "ma.Yn", "https://faustlibraries.grame.fr/libs/maths/#mayn"});
    tokens.add({"ma.np2", "ma.np2(n)", "https://faustlibraries.grame.fr/libs/maths/#manp2"});
    tokens.add({"ma.frac", "ma.frac(n)", "https://faustlibraries.grame.fr/libs/maths/#mafrac"});
    tokens.add({"ma.modulo", "ma.modulo(x,y)", "https://faustlibraries.grame.fr/libs/maths/#mamodulo"});
    tokens.add({"ma.isnan", "isnan(x)", "https://faustlibraries.grame.fr/libs/maths/#maisnan"});
    tokens.add({"ma.isinf", "isinf(x)", "https://faustlibraries.grame.fr/libs/maths/#maisinf"});
    tokens.add({"ma.chebychev", "ma.chebychev(N)", "https://faustlibraries.grame.fr/libs/maths/#machebychev"});
    tokens.add({"ma.chebychevpoly", "ma.chebychevpoly((c0,c1,...,cn))", "https://faustlibraries.grame.fr/libs/maths/#machebychevpoly"});
    tokens.add({"ma.diffn", "ma.diffn", "https://faustlibraries.grame.fr/libs/maths/#madiffn"});
    tokens.add({"ma.signum", "ma.signum", "https://faustlibraries.grame.fr/libs/maths/#masignum"});
    tokens.add({"ma.nextpow2", "2^ma.nextpow2(n)", "https://faustlibraries.grame.fr/libs/maths/#manextpow2"});
    tokens.add({"ma.zc", "ma.zc", "https://faustlibraries.grame.fr/libs/maths/#mazc"});
    tokens.add({"mi.initState", "mi.initState(x0)", "https://faustlibraries.grame.fr/libs/mi/#miinitstate"});
    tokens.add({"mi.mass", "mi.mass(m, grav, x0, xr0),_", "https://faustlibraries.grame.fr/libs/mi/#mimass"});
    tokens.add({"mi.oscil", "mi.oscil(m, k, z, grav, x0, xr0),_", "https://faustlibraries.grame.fr/libs/mi/#mioscil"});
    tokens.add({"mi.ground", "mi.ground(x0),_", "https://faustlibraries.grame.fr/libs/mi/#miground"});
    tokens.add({"mi.posInput", "mi.posInput(x0),_,_", "https://faustlibraries.grame.fr/libs/mi/#miposinput"});
    tokens.add({"mi.spring", "mi.spring(k, x1r, x2r),_,_", "https://faustlibraries.grame.fr/libs/mi/#mispring"});
    tokens.add({"mi.damper", "mi.damper(z, x1r, x2r),_,_", "https://faustlibraries.grame.fr/libs/mi/#midamper"});
    tokens.add({"mi.springDamper", "mi.springDamper(k, z, x1r, x2r),_,_", "https://faustlibraries.grame.fr/libs/mi/#mispringdamper"});
    tokens.add({"mi.nlSpringDamper2", "mi.nlSpringDamper2(k, q, z, x1r, x2r),_,_", "https://faustlibraries.grame.fr/libs/mi/#minlspringdamper2"});
    tokens.add({"mi.nlSpringDamper3", "mi.nlSpringDamper3(k, q, z, x1r, x2r),_,_", "https://faustlibraries.grame.fr/libs/mi/#minlspringdamper3"});
    tokens.add({"mi.nlSpringDamperClipped", "mi.nlSpringDamperClipped(s, c, k, z, x1r, x2r),_,_", "https://faustlibraries.grame.fr/libs/mi/#minlspringdamperclipped"});
    tokens.add({"mi.nlPluck", "mi.nlPluck(knl, scale, z, x1r, x2r),_,_", "https://faustlibraries.grame.fr/libs/mi/#minlpluck"});
    tokens.add({"mi.nlBow", "mi.nlBow(znl, scale, type, x1r, x2r),_,_", "https://faustlibraries.grame.fr/libs/mi/#minlbow"});
    tokens.add({"mi.collision", "mi.collision(k, z, thres, x1r, x2r),_,_", "https://faustlibraries.grame.fr/libs/mi/#micollision"});
    tokens.add({"mi.nlCollisionClipped", "mi.nlCollisionClipped(s, c, k, z, thres, x1r, x2r),_,_", "https://faustlibraries.grame.fr/libs/mi/#minlcollisionclipped"});
    tokens.add({"ef.cubicnl", "ef.cubicnl(drive,offset)", "https://faustlibraries.grame.fr/libs/misceffects/#efcubicnl"});
    tokens.add({"ef.gate_mono", "ef.gate_mono(thresh,att,hold,rel)", "https://faustlibraries.grame.fr/libs/misceffects/#efgate_mono"});
    tokens.add({"ef.gate_stereo", "ef.gate_stereo(thresh,att,hold,rel)", "https://faustlibraries.grame.fr/libs/misceffects/#efgate_stereo"});
    tokens.add({"ef.speakerbp", "speakerbp(f1,f2)", "https://faustlibraries.grame.fr/libs/misceffects/#efspeakerbp"});
    tokens.add({"ef.piano_dispersion_filter", "piano_dispersion_filter(M,B,f0)", "https://faustlibraries.grame.fr/libs/misceffects/#efpiano_dispersion_filter"});
    tokens.add({"ef.stereo_width", "ef.stereo_width(w)", "https://faustlibraries.grame.fr/libs/misceffects/#efstereo_width"});
    tokens.add({"ef.mesh_square", "ef.mesh_square(N)", "https://faustlibraries.grame.fr/libs/misceffects/#efmesh_square"});
    tokens.add({"ef.reverseEchoN(nChans,delay)", "_ : ef.reverseEchoN(N,delay) : si.bus(N)", "https://faustlibraries.grame.fr/libs/misceffects/#efreverseechon(nchans,delay)"});
    tokens.add({"ef.reverseDelayRamped(delay,phase)", "ef.ef.reverseDelayRamped(delay,phase)", "https://faustlibraries.grame.fr/libs/misceffects/#efreversedelayramped(delay,phase)"});
    tokens.add({"ef.uniformPanToStereo(nChans)", "si.bus(N) : ef.uniformPanToStereo(N) : _,_", "https://faustlibraries.grame.fr/libs/misceffects/#efuniformpantostereo(nchans)"});
    tokens.add({"ef.echo", "ef.echo(maxDuration,duration,feedback)", "https://faustlibraries.grame.fr/libs/misceffects/#efecho"});
    tokens.add({"ef.transpose", "ef.transpose(w, x, s)", "https://faustlibraries.grame.fr/libs/misceffects/#eftranspose"});
    tokens.add({"os.sinwaveform", "os.sinwaveform(tablesize)", "https://faustlibraries.grame.fr/libs/oscillators/#ossinwaveform"});
    tokens.add({"os.coswaveform", "os.coswaveform(tablesize)", "https://faustlibraries.grame.fr/libs/oscillators/#oscoswaveform"});
    tokens.add({"os.phasor", "os.phasor(tablesize,freq)", "https://faustlibraries.grame.fr/libs/oscillators/#osphasor"});
    tokens.add({"os.hs_phasor", "os.hs_phasor(tablesize,freq,reset)", "https://faustlibraries.grame.fr/libs/oscillators/#oshs_phasor"});
    tokens.add({"os.hsp_phasor", "hsp_phasor(tablesize,freq,reset,phase)", "https://faustlibraries.grame.fr/libs/oscillators/#oshsp_phasor"});
    tokens.add({"os.oscsin", "os.oscsin(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososcsin"});
    tokens.add({"os.hs_oscsin", "os.hs_oscsin(freq,reset)", "https://faustlibraries.grame.fr/libs/oscillators/#oshs_oscsin"});
    tokens.add({"os.osccos", "os.osccos(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososccos"});
    tokens.add({"os.hs_osccos", "os.hs_osccos(freq,reset)", "https://faustlibraries.grame.fr/libs/oscillators/#oshs_osccos"});
    tokens.add({"os.oscp", "os.oscp(freq,phase)", "https://faustlibraries.grame.fr/libs/oscillators/#ososcp"});
    tokens.add({"os.osci", "os.osci(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososci"});
    tokens.add({"os.osc", "os.osc(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososc"});
    tokens.add({"os.lf_imptrain", "os.lf_imptrain(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_imptrain"});
    tokens.add({"os.lf_pulsetrainpos", "os.lf_pulsetrainpos(freq, duty)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_pulsetrainpos"});
    tokens.add({"os.lf_pulsetrain", "os.lf_pulsetrain(freq,duty)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_pulsetrain"});
    tokens.add({"os.lf_squarewavepos", "os.lf_squarewavepos(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_squarewavepos"});
    tokens.add({"os.lf_squarewave", "os.lf_squarewave(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_squarewave"});
    tokens.add({"os.lf_trianglepos", "os.lf_trianglepos(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_trianglepos"});
    tokens.add({"os.lf_triangle", "os.lf_triangle(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_triangle"});
    tokens.add({"os.lf_rawsaw", "os.lf_rawsaw(periodsamps)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_rawsaw"});
    tokens.add({"os.lf_sawpos", "os.lf_sawpos(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_sawpos"});
    tokens.add({"os.lf_sawpos_phase", "os.lf_sawpos_phase(freq, phase)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_sawpos_phase"});
    tokens.add({"os.lf_sawpos_reset", "os.lf_sawpos_reset(freq,reset)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_sawpos_reset"});
    tokens.add({"os.lf_sawpos_phase_reset", "os.lf_sawpos_phase_reset(freq,phase,reset)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_sawpos_phase_reset"});
    tokens.add({"os.lf_saw", "os.lf_saw(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#oslf_saw"});
    tokens.add({"os.sawNp", "", "https://faustlibraries.grame.fr/libs/oscillators/#ossawnp"});
    tokens.add({"os.saw2dpw", "", "https://faustlibraries.grame.fr/libs/oscillators/#ossaw2dpw"});
    tokens.add({"os.saw3", "", "https://faustlibraries.grame.fr/libs/oscillators/#ossaw3"});
    tokens.add({"os.sawtooth", "os.sawtooth(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ossawtooth"});
    tokens.add({"os.saw2f2", "", "https://faustlibraries.grame.fr/libs/oscillators/#ossaw2f2"});
    tokens.add({"os.saw2f4", "", "https://faustlibraries.grame.fr/libs/oscillators/#ossaw2f4"});
    tokens.add({"os.pulsetrainN", "", "https://faustlibraries.grame.fr/libs/oscillators/#ospulsetrainn"});
    tokens.add({"os.pulsetrain", "os.pulsetrain(freq, duty)", "https://faustlibraries.grame.fr/libs/oscillators/#ospulsetrain"});
    tokens.add({"os.squareN", "", "https://faustlibraries.grame.fr/libs/oscillators/#ossquaren"});
    tokens.add({"os.square", "os.square(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ossquare"});
    tokens.add({"os.impulse", "os.impulse", "https://faustlibraries.grame.fr/libs/oscillators/#osimpulse"});
    tokens.add({"os.imptrainN", "", "https://faustlibraries.grame.fr/libs/oscillators/#osimptrainn"});
    tokens.add({"os.imptrain", "os.imptrain(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#osimptrain"});
    tokens.add({"os.triangleN", "", "https://faustlibraries.grame.fr/libs/oscillators/#ostrianglen"});
    tokens.add({"os.triangle", "os.triangle(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ostriangle"});
    tokens.add({"os.oscb", "os.oscb(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososcb"});
    tokens.add({"os.oscrq", "os.oscrq(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososcrq"});
    tokens.add({"os.oscrs", "os.oscrs(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososcrs"});
    tokens.add({"os.oscrc", "os.oscrc(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososcrc"});
    tokens.add({"os.oscs", "os.oscs(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososcs"});
    tokens.add({"os.quadosc", "os.quadosc(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#osquadosc"});
    tokens.add({"os.oscwc", "os.oscwc(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososcwc"});
    tokens.add({"os.oscws", "os.oscws(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososcws"});
    tokens.add({"os.oscq", "os.oscq(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososcq"});
    tokens.add({"os.oscw", "os.oscw(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ososcw"});
    tokens.add({"os.CZsaw", "os.CZsaw(fund,index)", "https://faustlibraries.grame.fr/libs/oscillators/#osczsaw"});
    tokens.add({"os.CZsawP", "os.CZsawP(fund,index)", "https://faustlibraries.grame.fr/libs/oscillators/#osczsawp"});
    tokens.add({"os.CZsquare", "os.CZsquare(fund,index)", "https://faustlibraries.grame.fr/libs/oscillators/#osczsquare"});
    tokens.add({"os.CZsquareP", "os.CZsquareP(fund,index)", "https://faustlibraries.grame.fr/libs/oscillators/#osczsquarep"});
    tokens.add({"os.CZpulse", "os.CZpulse(fund,index)", "https://faustlibraries.grame.fr/libs/oscillators/#osczpulse"});
    tokens.add({"os.CZpulseP", "os.CZpulseP(fund,index)", "https://faustlibraries.grame.fr/libs/oscillators/#osczpulsep"});
    tokens.add({"os.CZsinePulse", "os.CZsinePulse(fund,index)", "https://faustlibraries.grame.fr/libs/oscillators/#osczsinepulse"});
    tokens.add({"os.CZsinePulseP", "os.CZsinePulseP(fund,index)", "https://faustlibraries.grame.fr/libs/oscillators/#osczsinepulsep"});
    tokens.add({"os.CZhalfSine", "os.CZhalfSine(fund,index)", "https://faustlibraries.grame.fr/libs/oscillators/#osczhalfsine"});
    tokens.add({"os.CZhalfSineP", "os.CZhalfSineP(fund,index)", "https://faustlibraries.grame.fr/libs/oscillators/#osczhalfsinep"});
    tokens.add({"os.CZresSaw", "os.CZresSaw(fund,res)", "https://faustlibraries.grame.fr/libs/oscillators/#osczressaw"});
    tokens.add({"os.CZresTriangle", "os.CZresTriangle(fund,res)", "https://faustlibraries.grame.fr/libs/oscillators/#osczrestriangle"});
    tokens.add({"os.CZresTrap", "os.CZresTrap(fund,res)", "https://faustlibraries.grame.fr/libs/oscillators/#osczrestrap"});
    tokens.add({"os.polyblep", "os.polyblep(Q,phase)", "https://faustlibraries.grame.fr/libs/oscillators/#ospolyblep"});
    tokens.add({"os.polyblep_saw", "os.polyblep_saw(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ospolyblep_saw"});
    tokens.add({"os.polyblep_square", "os.polyblep_square(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ospolyblep_square"});
    tokens.add({"os.polyblep_triangle", "os.polyblep_triangle(freq)", "https://faustlibraries.grame.fr/libs/oscillators/#ospolyblep_triangle"});
    tokens.add({"no.noise", "no.noise", "https://faustlibraries.grame.fr/libs/noises/#nonoise"});
    tokens.add({"no.multirandom", "no.multirandom(N)", "https://faustlibraries.grame.fr/libs/noises/#nomultirandom"});
    tokens.add({"no.multinoise", "no.multinoise(N)", "https://faustlibraries.grame.fr/libs/noises/#nomultinoise"});
    tokens.add({"no.noises", "no.noises(N,i)", "https://faustlibraries.grame.fr/libs/noises/#nonoises"});
    tokens.add({"no.randomseed", "no.randomseed", "https://faustlibraries.grame.fr/libs/noises/#norandomseed"});
    tokens.add({"no.rnoise", "no.rnoise", "https://faustlibraries.grame.fr/libs/noises/#nornoise"});
    tokens.add({"no.rmultirandom", "no.rmultirandom(N)", "https://faustlibraries.grame.fr/libs/noises/#normultirandom"});
    tokens.add({"no.rmultinoise", "no.rmultinoise(N)", "https://faustlibraries.grame.fr/libs/noises/#normultinoise"});
    tokens.add({"no.rnoises", "no.rnoises(N,i)", "https://faustlibraries.grame.fr/libs/noises/#nornoises"});
    tokens.add({"no.pink_noise", "no.pink_noise", "https://faustlibraries.grame.fr/libs/noises/#nopink_noise"});
    tokens.add({"no.pink_noise_vm", "no.pink_noise_vm(N)", "https://faustlibraries.grame.fr/libs/noises/#nopink_noise_vm"});
    tokens.add({"no.sparse_noise", "no.sparse_noise(f0)", "https://faustlibraries.grame.fr/libs/noises/#nosparse_noise"});
    tokens.add({"no.velvet_noise_vm", "velvet_noise(amp, f0) : _", "https://faustlibraries.grame.fr/libs/noises/#novelvet_noise_vm"});
    tokens.add({"no.gnoise", "no.gnoise(N)", "https://faustlibraries.grame.fr/libs/noises/#nognoise"});
    tokens.add({"pf.flanger_mono", "pf.flanger_mono(dmax,curdel,depth,fb,invert)", "https://faustlibraries.grame.fr/libs/phaflangers/#pfflanger_mono"});
    tokens.add({"pf.flanger_stereo", "pf.flanger_stereo(dmax,curdel1,curdel2,depth,fb,invert)", "https://faustlibraries.grame.fr/libs/phaflangers/#pfflanger_stereo"});
    tokens.add({"pf.phaser2_mono", "", "https://faustlibraries.grame.fr/libs/phaflangers/#pfphaser2_mono"});
    tokens.add({"pf.phaser2_stereo", "", "https://faustlibraries.grame.fr/libs/phaflangers/#pfphaser2_stereo"});
    tokens.add({"pl.SR", "", "https://faustlibraries.grame.fr/libs/platform/#plsr"});
    tokens.add({"pl.BS", "", "https://faustlibraries.grame.fr/libs/platform/#plbs"});
    tokens.add({"pl.tablesize", "", "https://faustlibraries.grame.fr/libs/platform/#pltablesize"});
    tokens.add({"pm.speedOfSound", "", "https://faustlibraries.grame.fr/libs/physmodels/#pmspeedofsound"});
    tokens.add({"pm.maxLength", "", "https://faustlibraries.grame.fr/libs/physmodels/#pmmaxlength"});
    tokens.add({"pm.f2l", "pm.f2l(freq)", "https://faustlibraries.grame.fr/libs/physmodels/#pmf2l"});
    tokens.add({"pm.l2f", "pm.l2f(length)", "https://faustlibraries.grame.fr/libs/physmodels/#pml2f"});
    tokens.add({"pm.l2s", "pm.l2s(l)", "https://faustlibraries.grame.fr/libs/physmodels/#pml2s"});
    tokens.add({"pm.basicBlock", "chain(pm.basicBlock", "https://faustlibraries.grame.fr/libs/physmodels/#pmbasicblock"});
    tokens.add({"pm.chain", "pm.chain( A", "https://faustlibraries.grame.fr/libs/physmodels/#pmchain"});
    tokens.add({"pm.inLeftWave", "pm.inLeftWave(x)", "https://faustlibraries.grame.fr/libs/physmodels/#pminleftwave"});
    tokens.add({"pm.inRightWave", "pm.inRightWave(x)", "https://faustlibraries.grame.fr/libs/physmodels/#pminrightwave"});
    tokens.add({"pm.in", "model(x) = chapm.in(A", "https://faustlibraries.grame.fr/libs/physmodels/#pmin"});
    tokens.add({"pm.outLeftWave", "pm.outLeftWave", "https://faustlibraries.grame.fr/libs/physmodels/#pmoutleftwave"});
    tokens.add({"pm.outRightWave", "pm.outRightWave", "https://faustlibraries.grame.fr/libs/physmodels/#pmoutrightwave"});
    tokens.add({"pm.out", "pm.out", "https://faustlibraries.grame.fr/libs/physmodels/#pmout"});
    tokens.add({"pm.terminations", "terminations(a,b,c)", "https://faustlibraries.grame.fr/libs/physmodels/#pmterminations"});
    tokens.add({"pm.lTermination", "lTerminations(a,b)", "https://faustlibraries.grame.fr/libs/physmodels/#pmltermination"});
    tokens.add({"pm.rTermination", "rTerminations(b,c)", "https://faustlibraries.grame.fr/libs/physmodels/#pmrtermination"});
    tokens.add({"pm.closeIns", "pm.closeIns", "https://faustlibraries.grame.fr/libs/physmodels/#pmcloseins"});
    tokens.add({"pm.closeOuts", "_,_,_ : chain(...) : _", "https://faustlibraries.grame.fr/libs/physmodels/#pmcloseouts"});
    tokens.add({"pm.endChain", "pm.endChain(chain(...))", "https://faustlibraries.grame.fr/libs/physmodels/#pmendchain"});
    tokens.add({"pm.waveguideN", "chain(A : waveguideUd(nMax,n) : B)", "https://faustlibraries.grame.fr/libs/physmodels/#pmwaveguiden"});
    tokens.add({"pm.waveguide", "pm.waveguide(nMax,n)", "https://faustlibraries.grame.fr/libs/physmodels/#pmwaveguide"});
    tokens.add({"pm.bridgeFilter", "_ : bridge(brightness,absorption) : _", "https://faustlibraries.grame.fr/libs/physmodels/#pmbridgefilter"});
    tokens.add({"pm.modeFilter", "pm.modeFilter(freq,t60,gain)", "https://faustlibraries.grame.fr/libs/physmodels/#pmmodefilter"});
    tokens.add({"pm.stringSegment", "pm.stringSegment(maxLength,length)", "https://faustlibraries.grame.fr/libs/physmodels/#pmstringsegment"});
    tokens.add({"pm.openString", "pm.openString(length,stiffness,pluckPosition,excitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmopenstring"});
    tokens.add({"pm.nylonString", "pm.nylonString(length,pluckPosition,excitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmnylonstring"});
    tokens.add({"pm.steelString", "pm.steelString(length,pluckPosition,excitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmsteelstring"});
    tokens.add({"pm.openStringPick", "pm.openStringPick(length,stiffness,pluckPosition,excitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmopenstringpick"});
    tokens.add({"pm.openStringPickUp", "pm.openStringPickUp(length,stiffness,pluckPosition,excitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmopenstringpickup"});
    tokens.add({"pm.openStringPickDown", "pm.openStringPickDown(length,stiffness,pluckPosition,excitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmopenstringpickdown"});
    tokens.add({"pm.ksReflexionFilter", "terminations(_,chain(...),ksReflexionFilter)", "https://faustlibraries.grame.fr/libs/physmodels/#pmksreflexionfilter"});
    tokens.add({"pm.rStringRigidTermination", "chain(pm.rStringRigidTermination", "https://faustlibraries.grame.fr/libs/physmodels/#pmrstringrigidtermination"});
    tokens.add({"pm.lStringRigidTermination", "pm.lStringRigidTermination)", "https://faustlibraries.grame.fr/libs/physmodels/#pmlstringrigidtermination"});
    tokens.add({"pm.elecGuitarBridge", "pm.elecGuitarBridge)", "https://faustlibraries.grame.fr/libs/physmodels/#pmelecguitarbridge"});
    tokens.add({"pm.elecGuitarNuts", "chain(pm.elecGuitarNuts", "https://faustlibraries.grame.fr/libs/physmodels/#pmelecguitarnuts"});
    tokens.add({"pm.guitarBridge", "pm.guitarBridge)", "https://faustlibraries.grame.fr/libs/physmodels/#pmguitarbridge"});
    tokens.add({"pm.guitarNuts", "chain(pm.guitarNuts", "https://faustlibraries.grame.fr/libs/physmodels/#pmguitarnuts"});
    tokens.add({"pm.idealString", "pm.idealString(length,reflexion,xPosition,excitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmidealstring"});
    tokens.add({"pm.ks", "pm.ks(length,damping,excitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmks"});
    tokens.add({"pm.ks_ui_MIDI", "pm.ks_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmks_ui_midi"});
    tokens.add({"pm.elecGuitarModel", "pm.elecGuitarModel(length,pluckPosition,mute,excitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmelecguitarmodel"});
    tokens.add({"pm.elecGuitar", "pm.elecGuitar(length,pluckPosition,trigger)", "https://faustlibraries.grame.fr/libs/physmodels/#pmelecguitar"});
    tokens.add({"pm.elecGuitar_ui_MIDI", "pm.elecGuitar_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmelecguitar_ui_midi"});
    tokens.add({"pm.guitarBody", "pm.guitarBody)", "https://faustlibraries.grame.fr/libs/physmodels/#pmguitarbody"});
    tokens.add({"pm.guitarModel", "pm.guitarModel(length,pluckPosition,excitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmguitarmodel"});
    tokens.add({"pm.guitar", "pm.guitar(length,pluckPosition,trigger)", "https://faustlibraries.grame.fr/libs/physmodels/#pmguitar"});
    tokens.add({"pm.guitar_ui_MIDI", "pm.guitar_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmguitar_ui_midi"});
    tokens.add({"pm.nylonGuitarModel", "pm.nylonGuitarModel(length,pluckPosition,excitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmnylonguitarmodel"});
    tokens.add({"pm.nylonGuitar", "pm.nylonGuitar(length,pluckPosition,trigger)", "https://faustlibraries.grame.fr/libs/physmodels/#pmnylonguitar"});
    tokens.add({"pm.nylonGuitar_ui_MIDI", "pm.nylonGuitar_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmnylonguitar_ui_midi"});
    tokens.add({"pm.modeInterpRes", "pm.modeInterpRes(nModes,x,y)", "https://faustlibraries.grame.fr/libs/physmodels/#pmmodeinterpres"});
    tokens.add({"pm.modularInterpBody", "pm.modularInterpBody(nModes,shape,scale)", "https://faustlibraries.grame.fr/libs/physmodels/#pmmodularinterpbody"});
    tokens.add({"pm.modularInterpStringModel", "pm.modularInterpStringModel(length,pluckPosition,shape,scale,bodyExcitation,stringExcitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmmodularinterpstringmodel"});
    tokens.add({"pm.modularInterpInstr", "pm.modularInterpInstr(stringLength,pluckPosition,shape,scale,gain,tapBody,triggerString)", "https://faustlibraries.grame.fr/libs/physmodels/#pmmodularinterpinstr"});
    tokens.add({"pm.modularInterpInstr_ui_MIDI", "pm.modularInterpInstr_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmmodularinterpinstr_ui_midi"});
    tokens.add({"pm.bowTable", "pm.bowTable(offeset,slope)", "https://faustlibraries.grame.fr/libs/physmodels/#pmbowtable"});
    tokens.add({"pm.violinBowTable", "pm.violinBowTable(bowPressure)", "https://faustlibraries.grame.fr/libs/physmodels/#pmviolinbowtable"});
    tokens.add({"pm.bowInteraction", "pm.bowInteraction(bowTable)", "https://faustlibraries.grame.fr/libs/physmodels/#pmbowinteraction"});
    tokens.add({"pm.violinBow", "pm.violinBow(bowPressure,bowVelocity)", "https://faustlibraries.grame.fr/libs/physmodels/#pmviolinbow"});
    tokens.add({"pm.violinBowedString", "pm.violinBowedString(stringLength,bowPressure,bowVelocity,bowPosition)", "https://faustlibraries.grame.fr/libs/physmodels/#pmviolinbowedstring"});
    tokens.add({"pm.violinNuts", "chain(pm.violinNuts", "https://faustlibraries.grame.fr/libs/physmodels/#pmviolinnuts"});
    tokens.add({"pm.violinBridge", "pm.violinBridge", "https://faustlibraries.grame.fr/libs/physmodels/#pmviolinbridge"});
    tokens.add({"pm.violinBody", "pm.violinBody)", "https://faustlibraries.grame.fr/libs/physmodels/#pmviolinbody"});
    tokens.add({"pm.violinModel", "violinModel(stringLength,bowPressure,bowVelocity,bridgeReflexion,", "https://faustlibraries.grame.fr/libs/physmodels/#pmviolinmodel"});
    tokens.add({"pm.violin_ui", "violinModel_ui : _", "https://faustlibraries.grame.fr/libs/physmodels/#pmviolin_ui"});
    tokens.add({"pm.violin_ui_MIDI", "pm.violin_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmviolin_ui_midi"});
    tokens.add({"pm.openTube", "pm.openTube(maxLength,length)", "https://faustlibraries.grame.fr/libs/physmodels/#pmopentube"});
    tokens.add({"pm.reedTable", "pm.reedTable(offeset,slope)", "https://faustlibraries.grame.fr/libs/physmodels/#pmreedtable"});
    tokens.add({"pm.fluteJetTable", "pm.fluteJetTable", "https://faustlibraries.grame.fr/libs/physmodels/#pmflutejettable"});
    tokens.add({"pm.brassLipsTable", "pm.brassLipsTable(tubeLength,lipsTension)", "https://faustlibraries.grame.fr/libs/physmodels/#pmbrasslipstable"});
    tokens.add({"pm.clarinetReed", "pm.clarinetReed(stiffness)", "https://faustlibraries.grame.fr/libs/physmodels/#pmclarinetreed"});
    tokens.add({"pm.clarinetMouthPiece", "chain(pm.clarinetMouthPiece(reedStiffness,pressure)", "https://faustlibraries.grame.fr/libs/physmodels/#pmclarinetmouthpiece"});
    tokens.add({"pm.brassLips", "chain(pm.brassLips(tubeLength,lipsTension,pressure)", "https://faustlibraries.grame.fr/libs/physmodels/#pmbrasslips"});
    tokens.add({"pm.fluteEmbouchure", "pm.fluteEmbouchure(pressure)", "https://faustlibraries.grame.fr/libs/physmodels/#pmfluteembouchure"});
    tokens.add({"pm.wBell", "pm.wBell(opening))", "https://faustlibraries.grame.fr/libs/physmodels/#pmwbell"});
    tokens.add({"pm.fluteHead", "chain(pm.fluteHead", "https://faustlibraries.grame.fr/libs/physmodels/#pmflutehead"});
    tokens.add({"pm.fluteFoot", "pm.fluteFoot)", "https://faustlibraries.grame.fr/libs/physmodels/#pmflutefoot"});
    tokens.add({"pm.clarinetModel", "pm.clarinetModel(length,pressure,reedStiffness,bellOpening)", "https://faustlibraries.grame.fr/libs/physmodels/#pmclarinetmodel"});
    tokens.add({"pm.clarinetModel_ui", "pm.clarinetModel_ui(pressure)", "https://faustlibraries.grame.fr/libs/physmodels/#pmclarinetmodel_ui"});
    tokens.add({"pm.clarinet_ui", "pm.clarinet_ui", "https://faustlibraries.grame.fr/libs/physmodels/#pmclarinet_ui"});
    tokens.add({"pm.clarinet_ui_MIDI", "pm.clarinet_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmclarinet_ui_midi"});
    tokens.add({"pm.brassModel", "pm.brassModel(tubeLength,lipsTension,mute,pressure)", "https://faustlibraries.grame.fr/libs/physmodels/#pmbrassmodel"});
    tokens.add({"pm.brassModel_ui", "pm.brassModel_ui(pressure)", "https://faustlibraries.grame.fr/libs/physmodels/#pmbrassmodel_ui"});
    tokens.add({"pm.brass_ui", "pm.brass_ui", "https://faustlibraries.grame.fr/libs/physmodels/#pmbrass_ui"});
    tokens.add({"pm.brass_ui_MIDI", "pm.brass_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmbrass_ui_midi"});
    tokens.add({"pm.fluteModel", "pm.fluteModel(tubeLength,mouthPosition,pressure)", "https://faustlibraries.grame.fr/libs/physmodels/#pmflutemodel"});
    tokens.add({"pm.fluteModel_ui", "pm.fluteModel_ui(pressure)", "https://faustlibraries.grame.fr/libs/physmodels/#pmflutemodel_ui"});
    tokens.add({"pm.flute_ui", "pm.flute_ui", "https://faustlibraries.grame.fr/libs/physmodels/#pmflute_ui"});
    tokens.add({"pm.flute_ui_MIDI", "pm.flute_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmflute_ui_midi"});
    tokens.add({"pm.impulseExcitation", "gate = button('gate');", "https://faustlibraries.grame.fr/libs/physmodels/#pmimpulseexcitation"});
    tokens.add({"pm.strikeModel", "gate = button('gate');", "https://faustlibraries.grame.fr/libs/physmodels/#pmstrikemodel"});
    tokens.add({"pm.strike", "gate = button('gate');", "https://faustlibraries.grame.fr/libs/physmodels/#pmstrike"});
    tokens.add({"pm.pluckString", "trigger = button('gate');", "https://faustlibraries.grame.fr/libs/physmodels/#pmpluckstring"});
    tokens.add({"pm.blower", "pm.blower(pressure,breathGain,breathCutoff)", "https://faustlibraries.grame.fr/libs/physmodels/#pmblower"});
    tokens.add({"pm.blower_ui", "blower : somethingToBeBlown", "https://faustlibraries.grame.fr/libs/physmodels/#pmblower_ui"});
    tokens.add({"pm.djembeModel", "pm.djembeModel(freq)", "https://faustlibraries.grame.fr/libs/physmodels/#pmdjembemodel"});
    tokens.add({"pm.djembe", "djembe(freq,strikePosition,strikeSharpness,gain,trigger)", "https://faustlibraries.grame.fr/libs/physmodels/#pmdjembe"});
    tokens.add({"pm.djembe_ui_MIDI", "pm.djembe_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmdjembe_ui_midi"});
    tokens.add({"pm.marimbaBarModel", "pm.marimbaBarModel(freq,exPos,t60,t60DecayRatio,t60DecaySlope)", "https://faustlibraries.grame.fr/libs/physmodels/#pmmarimbabarmodel"});
    tokens.add({"pm.marimbaResTube", "marimbaResTube(tubeLength,excitation)", "https://faustlibraries.grame.fr/libs/physmodels/#pmmarimbarestube"});
    tokens.add({"pm.marimbaModel", "pm.marimbaModel(freq,exPos)", "https://faustlibraries.grame.fr/libs/physmodels/#pmmarimbamodel"});
    tokens.add({"pm.marimba", "pm.marimba(freq,strikePosition,strikeCutoff,strikeSharpness,gain,trigger)", "https://faustlibraries.grame.fr/libs/physmodels/#pmmarimba"});
    tokens.add({"pm.marimba_ui_MIDI", "pm.marimba_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmmarimba_ui_midi"});
    tokens.add({"pm.churchBellModel", "pm.churchBellModel(nModes,exPos,t60,t60DecayRatio,t60DecaySlope)", "https://faustlibraries.grame.fr/libs/physmodels/#pmchurchbellmodel"});
    tokens.add({"pm.churchBell", "pm.churchBell(strikePosition,strikeCutoff,strikeSharpness,gain,trigger)", "https://faustlibraries.grame.fr/libs/physmodels/#pmchurchbell"});
    tokens.add({"pm.churchBell_ui", "pm.churchBell_ui", "https://faustlibraries.grame.fr/libs/physmodels/#pmchurchbell_ui"});
    tokens.add({"pm.englishBellModel", "pm.englishBellModel(nModes,exPos,t60,t60DecayRatio,t60DecaySlope)", "https://faustlibraries.grame.fr/libs/physmodels/#pmenglishbellmodel"});
    tokens.add({"pm.englishBell", "pm.englishBell(strikePosition,strikeCutoff,strikeSharpness,gain,trigger)", "https://faustlibraries.grame.fr/libs/physmodels/#pmenglishbell"});
    tokens.add({"pm.englishBell_ui", "pm.englishBell_ui", "https://faustlibraries.grame.fr/libs/physmodels/#pmenglishbell_ui"});
    tokens.add({"pm.frenchBellModel", "pm.frenchBellModel(nModes,exPos,t60,t60DecayRatio,t60DecaySlope)", "https://faustlibraries.grame.fr/libs/physmodels/#pmfrenchbellmodel"});
    tokens.add({"pm.frenchBell", "pm.frenchBell(strikePosition,strikeCutoff,strikeSharpness,gain,trigger)", "https://faustlibraries.grame.fr/libs/physmodels/#pmfrenchbell"});
    tokens.add({"pm.frenchBell_ui", "pm.frenchBell_ui", "https://faustlibraries.grame.fr/libs/physmodels/#pmfrenchbell_ui"});
    tokens.add({"pm.germanBellModel", "pm.germanBellModel(nModes,exPos,t60,t60DecayRatio,t60DecaySlope)", "https://faustlibraries.grame.fr/libs/physmodels/#pmgermanbellmodel"});
    tokens.add({"pm.germanBell", "pm.germanBell(strikePosition,strikeCutoff,strikeSharpness,gain,trigger)", "https://faustlibraries.grame.fr/libs/physmodels/#pmgermanbell"});
    tokens.add({"pm.germanBell_ui", "pm.germanBell_ui", "https://faustlibraries.grame.fr/libs/physmodels/#pmgermanbell_ui"});
    tokens.add({"pm.russianBellModel", "pm.russianBellModel(nModes,exPos,t60,t60DecayRatio,t60DecaySlope)", "https://faustlibraries.grame.fr/libs/physmodels/#pmrussianbellmodel"});
    tokens.add({"pm.russianBell", "pm.russianBell(strikePosition,strikeCutoff,strikeSharpness,gain,trigger)", "https://faustlibraries.grame.fr/libs/physmodels/#pmrussianbell"});
    tokens.add({"pm.russianBell_ui", "pm.russianBell_ui", "https://faustlibraries.grame.fr/libs/physmodels/#pmrussianbell_ui"});
    tokens.add({"pm.standardBellModel", "pm.standardBellModel(nModes,exPos,t60,t60DecayRatio,t60DecaySlope)", "https://faustlibraries.grame.fr/libs/physmodels/#pmstandardbellmodel"});
    tokens.add({"pm.standardBell", "pm.standardBell(strikePosition,strikeCutoff,strikeSharpness,gain,trigger)", "https://faustlibraries.grame.fr/libs/physmodels/#pmstandardbell"});
    tokens.add({"pm.standardBell_ui", "pm.standardBell_ui", "https://faustlibraries.grame.fr/libs/physmodels/#pmstandardbell_ui"});
    tokens.add({"pm.formantValues", "ba.take(j+1,pm.formantValues.f(i))", "https://faustlibraries.grame.fr/libs/physmodels/#pmformantvalues"});
    tokens.add({"pm.voiceGender", "pm.voiceGender(voiceType)", "https://faustlibraries.grame.fr/libs/physmodels/#pmvoicegender"});
    tokens.add({"pm.skirtWidthMultiplier", "pm.skirtWidthMultiplier(vowel,freq,gender)", "https://faustlibraries.grame.fr/libs/physmodels/#pmskirtwidthmultiplier"});
    tokens.add({"pm.autobendFreq", "pm.autobendFreq(n,freq,voiceType)", "https://faustlibraries.grame.fr/libs/physmodels/#pmautobendfreq"});
    tokens.add({"pm.vocalEffort", "pm.vocalEffort(freq,gender)", "https://faustlibraries.grame.fr/libs/physmodels/#pmvocaleffort"});
    tokens.add({"pm.fof", "pm.fof(fc,bw,a,g)", "https://faustlibraries.grame.fr/libs/physmodels/#pmfof"});
    tokens.add({"pm.fofSH", "pm.fofSH(fc,bw,a,g)", "https://faustlibraries.grame.fr/libs/physmodels/#pmfofsh"});
    tokens.add({"pm.fofCycle", "pm.fofCycle(fc,bw,a,g,n)", "https://faustlibraries.grame.fr/libs/physmodels/#pmfofcycle"});
    tokens.add({"pm.fofSmooth", "pm.fofSmooth(fc,bw,sw,g,tau)", "https://faustlibraries.grame.fr/libs/physmodels/#pmfofsmooth"});
    tokens.add({"pm.formantFilterFofCycle", "pm.formantFilterFofCycle(voiceType,vowel,nFormants,i,freq)", "https://faustlibraries.grame.fr/libs/physmodels/#pmformantfilterfofcycle"});
    tokens.add({"pm.formantFilterFofSmooth", "pm.formantFilterFofSmooth(voiceType,vowel,nFormants,i,freq)", "https://faustlibraries.grame.fr/libs/physmodels/#pmformantfilterfofsmooth"});
    tokens.add({"pm.formantFilterBP", "pm.formantFilterBP(voiceType,vowel,nFormants,i,freq)", "https://faustlibraries.grame.fr/libs/physmodels/#pmformantfilterbp"});
    tokens.add({"pm.formantFilterbank", "pm.formantFilterbank(voiceType,vowel,formantGen,freq)", "https://faustlibraries.grame.fr/libs/physmodels/#pmformantfilterbank"});
    tokens.add({"pm.formantFilterbankFofCycle", "pm.formantFilterbankFofCycle(voiceType,vowel,freq)", "https://faustlibraries.grame.fr/libs/physmodels/#pmformantfilterbankfofcycle"});
    tokens.add({"pm.formantFilterbankFofSmooth", "pm.formantFilterbankFofSmooth(voiceType,vowel,freq)", "https://faustlibraries.grame.fr/libs/physmodels/#pmformantfilterbankfofsmooth"});
    tokens.add({"pm.formantFilterbankBP", "pm.formantFilterbankBP(voiceType,vowel)", "https://faustlibraries.grame.fr/libs/physmodels/#pmformantfilterbankbp"});
    tokens.add({"pm.SFFormantModel", "pm.SFFormantModel(voiceType,vowel,exType,freq,gain,source,filterbank,isFof)", "https://faustlibraries.grame.fr/libs/physmodels/#pmsfformantmodel"});
    tokens.add({"pm.SFFormantModelFofCycle", "pm.SFFormantModelFofCycle(voiceType,vowel,freq,gain)", "https://faustlibraries.grame.fr/libs/physmodels/#pmsfformantmodelfofcycle"});
    tokens.add({"pm.SFFormantModelFofSmooth", "pm.SFFormantModelFofSmooth(voiceType,vowel,freq,gain)", "https://faustlibraries.grame.fr/libs/physmodels/#pmsfformantmodelfofsmooth"});
    tokens.add({"pm.SFFormantModelBP", "pm.SFFormantModelBP(voiceType,vowel,exType,freq,gain)", "https://faustlibraries.grame.fr/libs/physmodels/#pmsfformantmodelbp"});
    tokens.add({"pm.SFFormantModelFofCycle_ui", "pm.SFFormantModelFofCycle_ui", "https://faustlibraries.grame.fr/libs/physmodels/#pmsfformantmodelfofcycle_ui"});
    tokens.add({"pm.SFFormantModelFofSmooth_ui", "pm.SFFormantModelFofSmooth_ui", "https://faustlibraries.grame.fr/libs/physmodels/#pmsfformantmodelfofsmooth_ui"});
    tokens.add({"pm.SFFormantModelBP_ui", "pm.SFFormantModelBP_ui", "https://faustlibraries.grame.fr/libs/physmodels/#pmsfformantmodelbp_ui"});
    tokens.add({"pm.SFFormantModelFofCycle_ui_MIDI", "pm.SFFormantModelFofCycle_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmsfformantmodelfofcycle_ui_midi"});
    tokens.add({"pm.SFFormantModelFofSmooth_ui_MIDI", "pm.SFFormantModelFofSmooth_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmsfformantmodelfofsmooth_ui_midi"});
    tokens.add({"pm.SFFormantModelBP_ui_MIDI", "pm.SFFormantModelBP_ui_MIDI", "https://faustlibraries.grame.fr/libs/physmodels/#pmsfformantmodelbp_ui_midi"});
    tokens.add({"pm.allpassNL", "pm.allpassNL(nonlinearity)", "https://faustlibraries.grame.fr/libs/physmodels/#pmallpassnl"});
    tokens.add({"pm)modalModel", "_", "https://faustlibraries.grame.fr/libs/physmodels/#pm)modalmodel"});
    tokens.add({"qu.quantize", "qu.quantize(rf,nl)", "https://faustlibraries.grame.fr/libs/quantizers/#ququantize"});
    tokens.add({"qu.quantizeSmoothed", "qu.quantizeSmoothed(rf,nl)", "https://faustlibraries.grame.fr/libs/quantizers/#ququantizesmoothed"});
    tokens.add({"qu.ionian", "quantize(rf,qu.ionian)", "https://faustlibraries.grame.fr/libs/quantizers/#quionian"});
    tokens.add({"qu.dorian", "quantize(rf,qu.dorian)", "https://faustlibraries.grame.fr/libs/quantizers/#qudorian"});
    tokens.add({"qu.phrygian", "quantize(rf,qu.phrygian)", "https://faustlibraries.grame.fr/libs/quantizers/#quphrygian"});
    tokens.add({"qu.lydian", "quantize(rf,qu.lydian)", "https://faustlibraries.grame.fr/libs/quantizers/#qulydian"});
    tokens.add({"qu.mixo", "quantize(rf,qu.mixo)", "https://faustlibraries.grame.fr/libs/quantizers/#qumixo"});
    tokens.add({"qu.eolian", "quantize(rf,qu.eolian)", "https://faustlibraries.grame.fr/libs/quantizers/#queolian"});
    tokens.add({"qu.locrian", "quantize(rf,qu.locrian)", "https://faustlibraries.grame.fr/libs/quantizers/#qulocrian"});
    tokens.add({"qu.pentanat", "quantize(rf,qu.pentanat)", "https://faustlibraries.grame.fr/libs/quantizers/#qupentanat"});
    tokens.add({"qu.kumoi", "quantize(rf,qu.kumoi)", "https://faustlibraries.grame.fr/libs/quantizers/#qukumoi"});
    tokens.add({"qu.natural", "quantize(rf,qu.natural)", "https://faustlibraries.grame.fr/libs/quantizers/#qunatural"});
    tokens.add({"qu.dodeca", "quantize(rf,qu.dodeca)", "https://faustlibraries.grame.fr/libs/quantizers/#qudodeca"});
    tokens.add({"qu.dimin", "quantize(rf,qu.dimin)", "https://faustlibraries.grame.fr/libs/quantizers/#qudimin"});
    tokens.add({"qu.penta", "quantize(rf,qu.penta)", "https://faustlibraries.grame.fr/libs/quantizers/#qupenta"});
    tokens.add({"rm.reduce", "reduce(op, n, x)", "https://faustlibraries.grame.fr/libs/reducemaps/#rmreduce"});
    tokens.add({"rm.reducemap", "reducemap(op, foo, n, x)", "https://faustlibraries.grame.fr/libs/reducemaps/#rmreducemap"});
    tokens.add({"re.jcrev", "re.jcrev", "https://faustlibraries.grame.fr/libs/reverbs/#rejcrev"});
    tokens.add({"re.satrev", "re.satrev", "https://faustlibraries.grame.fr/libs/reverbs/#resatrev"});
    tokens.add({"re.fdnrev0", "<1,2,4,...,N signals> <:", "https://faustlibraries.grame.fr/libs/reverbs/#refdnrev0"});
    tokens.add({"re.zita_rev_fdn", "re.zita_rev_fdn(f1,f2,t60dc,t60m,fsmax)", "https://faustlibraries.grame.fr/libs/reverbs/#rezita_rev_fdn"});
    tokens.add({"re.zita_rev1_stereo", "re.zita_rev1_stereo(rdel,f1,f2,t60dc,t60m,fsmax)", "https://faustlibraries.grame.fr/libs/reverbs/#rezita_rev1_stereo"});
    tokens.add({"re.zita_rev1_ambi", "re.zita_rev1_ambi(rgxyz,rdel,f1,f2,t60dc,t60m,fsmax)", "https://faustlibraries.grame.fr/libs/reverbs/#rezita_rev1_ambi"});
    tokens.add({"re.mono_freeverb", "re.mono_freeverb(fb1, fb2, damp, spread)", "https://faustlibraries.grame.fr/libs/reverbs/#remono_freeverb"});
    tokens.add({"re.stereo_freeverb", "re.stereo_freeverb(fb1, fb2, damp, spread)", "https://faustlibraries.grame.fr/libs/reverbs/#restereo_freeverb"});
    tokens.add({"re.dattorro_rev", "re.dattorro_rev(pre_delay, bw, i_diff1, i_diff2, decay, d_diff1, d_diff2, damping)", "https://faustlibraries.grame.fr/libs/reverbs/#redattorro_rev"});
    tokens.add({"re.dattorro_rev_default", "re.dattorro_rev_default", "https://faustlibraries.grame.fr/libs/reverbs/#redattorro_rev_default"});
    tokens.add({"re.jpverb", "re.jpverb(t60, damp, size, early_diff, mod_depth, mod_freq, low, mid, high, low_cutoff, high_cutoff)", "https://faustlibraries.grame.fr/libs/reverbs/#rejpverb"});
    tokens.add({"re.greyhole", "re.greyhole(dt, damp, size, early_diff, feedback, mod_depth, mod_freq)", "https://faustlibraries.grame.fr/libs/reverbs/#regreyhole"});
    tokens.add({"ro.cross", "cross(N)", "https://faustlibraries.grame.fr/libs/routes/#rocross"});
    tokens.add({"ro.crossnn", "ro.crossnn(N)", "https://faustlibraries.grame.fr/libs/routes/#rocrossnn"});
    tokens.add({"ro.crossn1", "ro.crossn1(N)", "https://faustlibraries.grame.fr/libs/routes/#rocrossn1"});
    tokens.add({"ro.cross1n", "(_,si.bus(N)) : crossn1(N) : (si.bus(N),_)", "https://faustlibraries.grame.fr/libs/routes/#rocross1n"});
    tokens.add({"ro.crossNM", "ro.crossNM(N,M)", "https://faustlibraries.grame.fr/libs/routes/#rocrossnm"});
    tokens.add({"ro.interleave", "ro.interleave(R,C)", "https://faustlibraries.grame.fr/libs/routes/#rointerleave"});
    tokens.add({"ro.butterfly", "ro.butterfly(N)", "https://faustlibraries.grame.fr/libs/routes/#robutterfly"});
    tokens.add({"ro.hadamard", "ro.hadamard(N)", "https://faustlibraries.grame.fr/libs/routes/#rohadamard"});
    tokens.add({"ro.recursivize", "ro.recursivize(p,q)", "https://faustlibraries.grame.fr/libs/routes/#rorecursivize"});
    tokens.add({"ro.bubbleSort", "ro.bubbleSort(N)", "https://faustlibraries.grame.fr/libs/routes/#robubblesort"});
    tokens.add({"sp.panner", "sp.panner(g)", "https://faustlibraries.grame.fr/libs/spats/#sppanner"});
    tokens.add({"sp.spat", "sp.spat(n,r,d)", "https://faustlibraries.grame.fr/libs/spats/#spspat"});
    tokens.add({"sp.stereoize", "sp.stereoize(p)", "https://faustlibraries.grame.fr/libs/spats/#spstereoize"});
    tokens.add({"si.bus", "bus(N)", "https://faustlibraries.grame.fr/libs/signals/#sibus"});
    tokens.add({"si.block", "si.block(N)", "https://faustlibraries.grame.fr/libs/signals/#siblock"});
    tokens.add({"si.interpolate", "si.interpolate(i)", "https://faustlibraries.grame.fr/libs/signals/#siinterpolate"});
    tokens.add({"si.smoo", "si.smoo;", "https://faustlibraries.grame.fr/libs/signals/#sismoo"});
    tokens.add({"si.polySmooth", "si.si.polySmooth(g,s,d)", "https://faustlibraries.grame.fr/libs/signals/#sipolysmooth"});
    tokens.add({"si.smoothAndH", "si.smoothAndH(g,s)", "https://faustlibraries.grame.fr/libs/signals/#sismoothandh"});
    tokens.add({"si.bsmooth", "si.bsmooth", "https://faustlibraries.grame.fr/libs/signals/#sibsmooth"});
    tokens.add({"si.dot", "si.dot(N)", "https://faustlibraries.grame.fr/libs/signals/#sidot"});
    tokens.add({"si.smooth", "si.si.smooth(ba.tau2pole(tau))", "https://faustlibraries.grame.fr/libs/signals/#sismooth"});
    tokens.add({"si.cbus", "cbus(n)", "https://faustlibraries.grame.fr/libs/signals/#sicbus"});
    tokens.add({"si.cmul", "si.cmul(r2,i2)", "https://faustlibraries.grame.fr/libs/signals/#sicmul"});
    tokens.add({"si.cconj", "si.cconj", "https://faustlibraries.grame.fr/libs/signals/#sicconj"});
    tokens.add({"si.lag_ud", "si.lag_ud(up, dn)", "https://faustlibraries.grame.fr/libs/signals/#silag_ud"});
    tokens.add({"si.rev", "si.rev(N)", "https://faustlibraries.grame.fr/libs/signals/#sirev"});
    tokens.add({"so.loop", "so.loop(sf, part)", "https://faustlibraries.grame.fr/libs/soundfiles/#soloop"});
    tokens.add({"so.loop_speed", "so.loop_speed(sf, part, speed)", "https://faustlibraries.grame.fr/libs/soundfiles/#soloop_speed"});
    tokens.add({"so.loop_speed_level", "so.loop_speed_level(sf, part, speed, level)", "https://faustlibraries.grame.fr/libs/soundfiles/#soloop_speed_level"});
    tokens.add({"sy.popFilterPerc", "popFilterDrum(freq,q,gate) : _", "https://faustlibraries.grame.fr/libs/synths/#sypopfilterperc"});
    tokens.add({"sy.dubDub", "sy.dubDub(freq,ctFreq,q,gate)", "https://faustlibraries.grame.fr/libs/synths/#sydubdub"});
    tokens.add({"sy.sawTrombone", "sy.sawTrombone(att,freq,gain,gate)", "https://faustlibraries.grame.fr/libs/synths/#sysawtrombone"});
    tokens.add({"sy.combString", "sy.combString(freq,res,gate)", "https://faustlibraries.grame.fr/libs/synths/#sycombstring"});
    tokens.add({"sy.additiveDrum", "sy.additiveDrum(freq,freqRatio,gain,harmDec,att,rel,gate)", "https://faustlibraries.grame.fr/libs/synths/#syadditivedrum"});
    tokens.add({"sy.fm", "freqs = (300,400,...);", "https://faustlibraries.grame.fr/libs/synths/#syfm"});
    tokens.add({"sy.kick", "sy.kick(pitch, click, attack, decay, drive, gate)", "https://faustlibraries.grame.fr/libs/synths/#sykick"});
    tokens.add({"sy.clap", "sy.clap(tone, attack, decay, gate)", "https://faustlibraries.grame.fr/libs/synths/#syclap"});
    tokens.add({"sy.hat", "sy.hat(pitch, tone, attack, decay, gate)", "https://faustlibraries.grame.fr/libs/synths/#syhat"});
    tokens.add({"ve.moog_vcf", "ve.moog_vcf(res,fr)", "https://faustlibraries.grame.fr/libs/vaeffects/#vemoog_vcf"});
    tokens.add({"ve.moog_vcf_2b[n]", "_ : moog_vcf_2b(res,fr) : _", "https://faustlibraries.grame.fr/libs/vaeffects/#vemoog_vcf_2b[n]"});
    tokens.add({"ve.moogLadder", "ve.moogLadder(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#vemoogladder"});
    tokens.add({"ve.moogHalfLadder", "ve.moogHalfLadder(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#vemooghalfladder"});
    tokens.add({"ve.diodeLadder", "ve.diodeLadder(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#vediodeladder"});
    tokens.add({"ve.korg35LPF", "ve.korg35LPF(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#vekorg35lpf"});
    tokens.add({"ve.korg35HPF", "ve.korg35HPF(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#vekorg35hpf"});
    tokens.add({"ve.oberheim", "ve.oberheim(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#veoberheim"});
    tokens.add({"ve.oberheimBSF", "ve.oberheimBSF(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#veoberheimbsf"});
    tokens.add({"ve.oberheimBPF", "ve.oberheimBPF(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#veoberheimbpf"});
    tokens.add({"ve.oberheimHPF", "ve.oberheimHPF(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#veoberheimhpf"});
    tokens.add({"ve.oberheimLPF", "ve.oberheimLPF(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#veoberheimlpf"});
    tokens.add({"ve.sallenKeyOnePoleHPF", "ve.sallenKeyOnePoleHPF(normFreq)", "https://faustlibraries.grame.fr/libs/vaeffects/#vesallenkeyonepolehpf"});
    tokens.add({"ve.sallenKey2ndOrder", "ve.sallenKey2ndOrder(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#vesallenkey2ndorder"});
    tokens.add({"ve.sallenKey2ndOrderLPF", "ve.sallenKey2ndOrderLPF(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#vesallenkey2ndorderlpf"});
    tokens.add({"ve.sallenKey2ndOrderBPF", "ve.sallenKey2ndOrderBPF(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#vesallenkey2ndorderbpf"});
    tokens.add({"ve.sallenKey2ndOrderHPF", "ve.sallenKey2ndOrderHPF(normFreq,Q)", "https://faustlibraries.grame.fr/libs/vaeffects/#vesallenkey2ndorderhpf"});
    tokens.add({"ve.wah4", "ve.wah4(fr)", "https://faustlibraries.grame.fr/libs/vaeffects/#vewah4"});
    tokens.add({"ve.autowah", "ve.autowah(level)", "https://faustlibraries.grame.fr/libs/vaeffects/#veautowah"});
    tokens.add({"ve.crybaby", "ve.crybaby(wah)", "https://faustlibraries.grame.fr/libs/vaeffects/#vecrybaby"});
    tokens.add({"ve.vocoder", "ve.vocoder(nBands,att,rel,BWRatio,source,excitation)", "https://faustlibraries.grame.fr/libs/vaeffects/#vevocoder"});
    tokens.add({"vl.version", "vl.version", "https://faustlibraries.grame.fr/libs/version/#vlversion"});
    tokens.add({"wa.lowpass2", "wa.lowpass2(f0, Q, dtune)", "https://faustlibraries.grame.fr/libs/webaudio/#walowpass2"});
    tokens.add({"wa.highpass2", "wa.highpass2(f0, Q, dtune)", "https://faustlibraries.grame.fr/libs/webaudio/#wahighpass2"});
    tokens.add({"wa.bandpass2", "wa.bandpass2(f0, Q, dtune)", "https://faustlibraries.grame.fr/libs/webaudio/#wabandpass2"});
    tokens.add({"wa.notch2", "wa.notch2(f0, Q, dtune)", "https://faustlibraries.grame.fr/libs/webaudio/#wanotch2"});
    tokens.add({"wa.allpass2", "wa.allpass2(f0, Q, dtune)", "https://faustlibraries.grame.fr/libs/webaudio/#waallpass2"});
    tokens.add({"wa.peaking2", "wa.peaking2(f0, gain, Q, dtune)", "https://faustlibraries.grame.fr/libs/webaudio/#wapeaking2"});
    tokens.add({"wa.lowshelf2", "", "https://faustlibraries.grame.fr/libs/webaudio/#walowshelf2"});
    tokens.add({"wa.highshelf2", "", "https://faustlibraries.grame.fr/libs/webaudio/#wahighshelf2"});
    tokens.add({"wd.resistor", "r1(i) = resistor(i, R);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdresistor"});
    tokens.add({"wd.resistor_Vout", "rout(i) = resistor_Vout(i, R);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdresistor_vout"});
    tokens.add({"wd.resistor_Iout", "rout(i) = resistor_Iout(i, R);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdresistor_iout"});
    tokens.add({"wd.u_voltage", "v1(i) = u_Voltage(i, ein);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_voltage"});
    tokens.add({"wd.u_current", "i1(i) = u_current(i, jin);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_current"});
    tokens.add({"wd.resVoltage", "v1(i) = resVoltage(i, R, ein);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdresvoltage"});
    tokens.add({"wd.resVoltage_Vout", "vout(i) = resVoltage_Vout(i, R, ein);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdresvoltage_vout"});
    tokens.add({"wd.u_resVoltage", "v1(i) = u_resVoltage(i, R, ein);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_resvoltage"});
    tokens.add({"wd.resCurrent", "i1(i) = resCurrent(i, R, jin);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdrescurrent"});
    tokens.add({"wd.u_resCurrent", "i1(i) = u_resCurrent(i, R, jin);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_rescurrent"});
    tokens.add({"wd.u_switch", "s1(i) = u_resCurrent(i, lambda);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_switch"});
    tokens.add({"wd.capacitor", "c1(i) = capacitor(i, R);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdcapacitor"});
    tokens.add({"wd.capacitor_Vout", "cout(i) = capacitor_Vout(i, R);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdcapacitor_vout"});
    tokens.add({"wd.inductor", "l1(i) = inductor(i, R);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdinductor"});
    tokens.add({"wd.inductor_Vout", "lout(i) = inductor_Vout(i, R);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdinductor_vout"});
    tokens.add({"wd.u_idealDiode", "buildtree( wd.u_idealDiode", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_idealdiode"});
    tokens.add({"wd.u_chua", "chua1(i) = u_chua(i, G1, G2, V0);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_chua"});
    tokens.add({"wd.lambert", "wd.lambert(n, itr)", "https://faustlibraries.grame.fr/libs/wdmodels/#wdlambert"});
    tokens.add({"wd.u_diodePair", "d1(i) = u_diodePair(i, Is, Vt);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_diodepair"});
    tokens.add({"wd.u_diodeSingle", "d1(i) = u_diodeSingle(i, Is, Vt);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_diodesingle"});
    tokens.add({"wd.u_diodeAntiparallel", "d1(i) = u_diodeAntiparallel(i, Is, Vt);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_diodeantiparallel"});
    tokens.add({"wd.u_parallel2Port", "buildtree( wd.u_parallel2Port", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_parallel2port"});
    tokens.add({"wd.parallel2Port", "wd.parallel2Port", "https://faustlibraries.grame.fr/libs/wdmodels/#wdparallel2port"});
    tokens.add({"wd.u_series2Port", "buildtree( wd.u_series2Port", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_series2port"});
    tokens.add({"wd.series2Port", "wd.series2Port", "https://faustlibraries.grame.fr/libs/wdmodels/#wdseries2port"});
    tokens.add({"wd.parallelCurrent", "i1(i) = parallelCurrent(i, jin);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdparallelcurrent"});
    tokens.add({"wd.seriesVoltage", "v1(i) = seriesVoltage(i, vin)", "https://faustlibraries.grame.fr/libs/wdmodels/#wdseriesvoltage"});
    tokens.add({"wd.u_transformer", "t1(i) = u_transformer(i, tr);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_transformer"});
    tokens.add({"wd.transformer", "t1(i) = transformer(i, tr);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdtransformer"});
    tokens.add({"wd.u_transformerActive", "t1(i) = u_transformerActive(i, gamma1, gamma2);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_transformeractive"});
    tokens.add({"wd.transformerActive", "t1(i) = transformerActive(i, gamma1, gamma2);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdtransformeractive"});
    tokens.add({"wd.parallel", "wd.parallel", "https://faustlibraries.grame.fr/libs/wdmodels/#wdparallel"});
    tokens.add({"wd.series", "", "https://faustlibraries.grame.fr/libs/wdmodels/#wdseries"});
    tokens.add({"wd.u_sixportPassive", "", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_sixportpassive"});
    tokens.add({"wd.genericNode", "n1(i) = genericNode(i, scatter, upRes);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdgenericnode"});
    tokens.add({"wd.genericNode_Vout", "n1(i) = genericNode_Vout(i, scatter, upRes);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdgenericnode_vout"});
    tokens.add({"wd.genericNode_Iout", "n1(i) = genericNode_Iout(i, scatter, upRes);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdgenericnode_iout"});
    tokens.add({"wd.u_genericNode", "n1(i) = u_genericNode(i, scatter);", "https://faustlibraries.grame.fr/libs/wdmodels/#wdu_genericnode"});
    tokens.add({"wd.builddown", "wd.builddown(A", "https://faustlibraries.grame.fr/libs/wdmodels/#wdbuilddown"});
    tokens.add({"wd.buildup", "B)~wd.buildup(A", "https://faustlibraries.grame.fr/libs/wdmodels/#wdbuildup"});
    tokens.add({"wd.getres", "wd.getres(A", "https://faustlibraries.grame.fr/libs/wdmodels/#wdgetres"});
    tokens.add({"wd.parres", "parres((A , B))~parres((A , B));", "https://faustlibraries.grame.fr/libs/wdmodels/#wdparres"});
    tokens.add({"wd.buildout", "wd.buildout( A", "https://faustlibraries.grame.fr/libs/wdmodels/#wdbuildout"});
    tokens.add({"wd.buildtree", "wd.buildtree(A", "https://faustlibraries.grame.fr/libs/wdmodels/#wdbuildtree"});

    return tokens;
};